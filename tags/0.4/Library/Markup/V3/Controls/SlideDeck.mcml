<Mcml xmlns ="http://schemas.microsoft.com/2006/mcml" 
      xmlns:cor ="assembly://MSCorLib/System" 
      xmlns:coll="assembly://MSCorLib/System.Collections" 
      xmlns:shl ="assembly://Library/Library.Code.V3" 
      xmlns:comm="resx://Library/Library.Resources/V3_Globals" 
      xmlns:slide="resx://Library/Library.Resources/V3_Controls_Slide" 
      xmlns:anim="resx://Library/Library.Resources/V3_Controls_SlideAnimations" 
      xmlns:me ="Me">
  <UI Name="SlideDeck_Base">
    <Properties>
      <shl:SlideDeck Name="SlideDeck" SlideDeck="$Required" Wrap="true" />
      <shl:SlideBlueprint Name="SlideBlueprint" SlideBlueprint="null" />
      <ICommand Name="CommandPopOverlay" ICommand="null"/>
      <ICommand Name="CommandClearOverlays" ICommand="null"/>
      <EditableText Name="TransitionState" Value="None"/>
      <EditableText Name="NavigationDirection" Value="None"/>
    </Properties>
    <Locals>
      <Environment Name="Environment"/>
      <KeyHandler Name="KeyLeft" Key="Left" HandlerStage="Routed" Handle="true" Command="[SlideDeck.CommandPrevSlide]" />
      <KeyHandler Name="KeyRight" Key="Right" HandlerStage="Routed" Handle="true" Command="[SlideDeck.CommandNextSlide]" />
      <KeyHandler Name="KeyEsc" Key="Escape" HandlerStage="Routed" Handle="true" Command="[CommandPopOverlay]" />
      <ShortcutHandler Name="Back" Shortcut="Back" HandlerStage="Routed" Handle="true" Command="[CommandPopOverlay]" />
      <ShortcutHandler Name="Clear" Shortcut="Clear" HandlerStage="Routed" Handle="true" Command="[CommandPopOverlay]" />
      <cor:Boolean Name="FirstChosen" Boolean="true" />
      <EditableText Name="SlideAnimationState" Value="Idle"/>
    </Locals>
    <Rules>
      <Default Target="[Accessible.Role]" Value="Pane" />
      <Default Target="[Accessible.Name]" Value="SlideDeck Base" />
      <Default Target="[Input.KeyInteractive]" Value="true"/>
      <Binding Source="[SlideDeck]" Target="[SlideHost.SlideDeck]" />
      <Binding Source="[CommandPopOverlay]" Target="[SlideDeck.CommandPopOverlay]"/>
      <Binding Source="[CommandClearOverlays]" Target="[SlideDeck.CommandClearOverlays]"/>
      <Binding Source="[SlideDeck.Chosen!shl:SlideBlueprint]" Target="[SlideBlueprint]" />
      <Rule>
        <Conditions>
          <Equality Source="[Environment.IsRightToLeft]" Value="true"/>
        </Conditions>
        <Actions>
          <Set Target="[KeyLeft.Command]" Value="[SlideDeck.CommandNextSlide]"/>
          <Set Target="[KeyRight.Command]" Value="[SlideDeck.CommandPrevSlide]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Modified Source="[SlideDeck.CommandNextSlide.Invoked]"/>
        </Conditions>
        <Actions>
          <Set Target="[SlideHost.AnimationSlideOut]" Value="animation://anim:Slide.NavRight.Hide" InvokePolicy="Synchronous" ExclusiveApply="false" />
          <Set Target="[NavigationDirection.Value]" Value="Right" />
          <Invoke Target="[SlideDeck.NextValue]" />
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Modified Source="[SlideDeck.CommandPrevSlide.Invoked]"/>
        </Conditions>
        <Actions>
          <Set Target="[SlideHost.AnimationSlideOut]" Value="animation://anim:Slide.NavLeft.Hide" InvokePolicy="Synchronous" ExclusiveApply="false" />
          <Set Target="[NavigationDirection.Value]" Value="Left" />
          <Invoke Target="[SlideDeck.PreviousValue]" />
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Modified Source="[SlideHost.Status]"/>
          <Equality Source="[SlideHost.Status]" Value="Loading" />
        </Conditions>
        <Actions>
          <DebugTrace Message="Loading" />
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Modified Source="[SlideHost.Status]"/>
          <Equality Source="[SlideHost.Status]" Value="Success" />
          <Equality Source="[NavigationDirection.Value]" Value="Left" />
        </Conditions>
        <Actions>
          <Set Target="[SlideHost.AnimationSlideIn]" Value="animation://anim:Slide.NavLeft.Show" InvokePolicy="Synchronous" ExclusiveApply="false" />
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Modified Source="[SlideHost.Status]"/>
          <Equality Source="[SlideHost.Status]" Value="Success" />
          <Equality Source="[NavigationDirection.Value]" Value="Right" />
        </Conditions>
        <Actions>
          <Set Target="[SlideHost.AnimationSlideIn]" Value="animation://anim:Slide.NavRight.Show" InvokePolicy="Synchronous" ExclusiveApply="false" />
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Modified Source="[SlideDeck.Chosen]" InitialEvaluate="true" />
        </Conditions>
        <Actions>
          <Set Target="[SlideHost.Source]" Value="[SlideDeck.Chosen!shl:SlideBlueprint.UIName]" />
          <Invoke Target="[SlideHost.NavigateInto]" />
        </Actions>
      </Rule>
      <Condition Source="[SlideHost.Status]" SourceValue="Error">
        <Actions>
          <Set Target="[ErrorLayer.Visible]" Value="true"/>
          <Set Target="[ErrorLayer.DataSource]" Value="[SlideHost.Errors]"/>
        </Actions>
      </Condition>
      <Condition Source="[SlideHost.Status]" SourceValue="Success">
        <Actions>
          <Set Target="[ErrorLayer.Visible]" Value="false"/>
          <Set Target="[SlideHost.Visible]" Value="true" InvokePolicy="AsynchronousLowPri" ExclusiveApply="false" />
        </Actions>
      </Condition>
    </Rules>
    <Content>
      <Panel>
        <Children>
          <slide:Slide_Base Name="SlideHost" SlideDeck="[SlideDeck]" ThrowOnLoadError="false" CommandPopOverlay="[CommandPopOverlay]" CommandClearOverlays="[CommandPopOverlay]" />
          <me:ErrorsList Name="ErrorLayer" Visible="false" />
        </Children>
      </Panel>
    </Content>
  </UI>
  <UI Name="ErrorsList">
    <Properties>
      <coll:IList Name="DataSource" IList="null"/>
      <Image Name="ErrorBackground" Source="resx://Library/Library.Resources/V3_Controls_Common_Overlays_Background_Dark" NineGrid="10,10,10,10"/>
    </Properties>
    <Rules>
      <Binding Source="[DataSource]" Target="[ErrorRepeater.Source]">
        <Actions>
          <DebugTrace Message="Errors: {0}">
            <Params>
              <ObjectPath ObjectPath="[DataSource]"/>
            </Params>
          </DebugTrace>
        </Actions>
      </Binding>
    </Rules>
    <Content>
      <Graphic Name="ErrorLayer" Layout="Form" Margins="50,50,50,50" Padding="10,10,10,10" Content="[ErrorBackground]">
        <Children>
          <Repeater Name="ErrorRepeater" Layout="VerticalFlow">
            <Content>
              <Text Font="Segoe Media Center,14" Color="White" Content="[RepeatedItem!cor:String]" WordWrap="true"/>
            </Content>
          </Repeater>
        </Children>
        <Animations>
          <Animation Type="Show">
            <Keyframes>
              <AlphaKeyframe Time="0" Value="0"/>
              <AlphaKeyframe Time=".5" Value="1"/>
            </Keyframes>
          </Animation>
        </Animations>
      </Graphic>
    </Content>
  </UI>
  <UI Name="ActiveSurface">
    <Locals>
      <ClickHandler Name="Clicker"/>
    </Locals>
    <Properties>
      <ICommand Name="DismissCmd" ICommand="$Required"/>
    </Properties>
    <Rules>
      <Default Target="[Input.KeyInteractive]" Value="false"/>
      <Rule ConditionLogicalOp="And">
        <Conditions>
          <Equality Source="[Clicker.Clicking]" Value="true"/>
        </Conditions>
        <Actions>
          <Invoke Target="[DismissCmd.Invoke]"/>
        </Actions>
      </Rule>
    </Rules>
    <Content>
      <Panel Layout="Form"/>
    </Content>
  </UI>
</Mcml>