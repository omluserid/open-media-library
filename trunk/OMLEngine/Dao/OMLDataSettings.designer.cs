#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OMLEngine.Dao
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="OML")]
	public partial class OMLDataSettingsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMataDataMapping(MataDataMapping instance);
    partial void UpdateMataDataMapping(MataDataMapping instance);
    partial void DeleteMataDataMapping(MataDataMapping instance);
    partial void InsertGenreMapping(GenreMapping instance);
    partial void UpdateGenreMapping(GenreMapping instance);
    partial void DeleteGenreMapping(GenreMapping instance);
    partial void InsertSetting(Setting instance);
    partial void UpdateSetting(Setting instance);
    partial void DeleteSetting(Setting instance);
    #endregion
		
		public OMLDataSettingsDataContext() : 
				base(global::OMLEngine.Properties.Settings.Default.OMLConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public OMLDataSettingsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OMLDataSettingsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OMLDataSettingsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OMLDataSettingsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<MataDataMapping> MataDataMappings
		{
			get
			{
				return this.GetTable<MataDataMapping>();
			}
		}
		
		public System.Data.Linq.Table<GenreMapping> GenreMappings
		{
			get
			{
				return this.GetTable<GenreMapping>();
			}
		}
		
		internal System.Data.Linq.Table<Setting> Settings
		{
			get
			{
				return this.GetTable<Setting>();
			}
		}
	}
	
	[Table(Name="dbo.MataDataMappings")]
	public partial class MataDataMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RowID;
		
		private string _MatadataProperty;
		
		private string _MetadataProvider;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRowIDChanging(int value);
    partial void OnRowIDChanged();
    partial void OnMatadataPropertyChanging(string value);
    partial void OnMatadataPropertyChanged();
    partial void OnMetadataProviderChanging(string value);
    partial void OnMetadataProviderChanged();
    #endregion
		
		public MataDataMapping()
		{
			OnCreated();
		}
		
		[Column(Storage="_RowID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int RowID
		{
			get
			{
				return this._RowID;
			}
			set
			{
				if ((this._RowID != value))
				{
					this.OnRowIDChanging(value);
					this.SendPropertyChanging();
					this._RowID = value;
					this.SendPropertyChanged("RowID");
					this.OnRowIDChanged();
				}
			}
		}
		
		[Column(Storage="_MatadataProperty", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MatadataProperty
		{
			get
			{
				return this._MatadataProperty;
			}
			set
			{
				if ((this._MatadataProperty != value))
				{
					this.OnMatadataPropertyChanging(value);
					this.SendPropertyChanging();
					this._MatadataProperty = value;
					this.SendPropertyChanged("MatadataProperty");
					this.OnMatadataPropertyChanged();
				}
			}
		}
		
		[Column(Storage="_MetadataProvider", DbType="NVarChar(50)")]
		public string MetadataProvider
		{
			get
			{
				return this._MetadataProvider;
			}
			set
			{
				if ((this._MetadataProvider != value))
				{
					this.OnMetadataProviderChanging(value);
					this.SendPropertyChanging();
					this._MetadataProvider = value;
					this.SendPropertyChanged("MetadataProvider");
					this.OnMetadataProviderChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.GenreMappings")]
	public partial class GenreMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RowID;
		
		private string _GenreName;
		
		private string _GenreMapTo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRowIDChanging(int value);
    partial void OnRowIDChanged();
    partial void OnGenreNameChanging(string value);
    partial void OnGenreNameChanged();
    partial void OnGenreMapToChanging(string value);
    partial void OnGenreMapToChanged();
    #endregion
		
		public GenreMapping()
		{
			OnCreated();
		}
		
		[Column(Storage="_RowID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int RowID
		{
			get
			{
				return this._RowID;
			}
			set
			{
				if ((this._RowID != value))
				{
					this.OnRowIDChanging(value);
					this.SendPropertyChanging();
					this._RowID = value;
					this.SendPropertyChanged("RowID");
					this.OnRowIDChanged();
				}
			}
		}
		
		[Column(Storage="_GenreName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string GenreName
		{
			get
			{
				return this._GenreName;
			}
			set
			{
				if ((this._GenreName != value))
				{
					this.OnGenreNameChanging(value);
					this.SendPropertyChanging();
					this._GenreName = value;
					this.SendPropertyChanged("GenreName");
					this.OnGenreNameChanged();
				}
			}
		}
		
		[Column(Storage="_GenreMapTo", DbType="NVarChar(50)")]
		public string GenreMapTo
		{
			get
			{
				return this._GenreMapTo;
			}
			set
			{
				if ((this._GenreMapTo != value))
				{
					this.OnGenreMapToChanging(value);
					this.SendPropertyChanging();
					this._GenreMapTo = value;
					this.SendPropertyChanged("GenreMapTo");
					this.OnGenreMapToChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Settings")]
	internal partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SettingName;
		
		private string _SettingValue;
		
		private string _InstanceName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSettingNameChanging(string value);
    partial void OnSettingNameChanged();
    partial void OnSettingValueChanging(string value);
    partial void OnSettingValueChanged();
    partial void OnInstanceNameChanging(string value);
    partial void OnInstanceNameChanged();
    #endregion
		
		public Setting()
		{
			OnCreated();
		}
		
		[Column(Storage="_SettingName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SettingName
		{
			get
			{
				return this._SettingName;
			}
			set
			{
				if ((this._SettingName != value))
				{
					this.OnSettingNameChanging(value);
					this.SendPropertyChanging();
					this._SettingName = value;
					this.SendPropertyChanged("SettingName");
					this.OnSettingNameChanged();
				}
			}
		}
		
		[Column(Storage="_SettingValue", DbType="NVarChar(MAX)")]
		public string SettingValue
		{
			get
			{
				return this._SettingValue;
			}
			set
			{
				if ((this._SettingValue != value))
				{
					this.OnSettingValueChanging(value);
					this.SendPropertyChanging();
					this._SettingValue = value;
					this.SendPropertyChanged("SettingValue");
					this.OnSettingValueChanged();
				}
			}
		}
		
		[Column(Storage="_InstanceName", DbType="NVarChar(50)", CanBeNull=false, IsPrimaryKey=true)]
		public string InstanceName
		{
			get
			{
				return this._InstanceName;
			}
			set
			{
				if ((this._InstanceName != value))
				{
					this.OnInstanceNameChanging(value);
					this.SendPropertyChanging();
					this._InstanceName = value;
					this.SendPropertyChanged("InstanceName");
					this.OnInstanceNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
