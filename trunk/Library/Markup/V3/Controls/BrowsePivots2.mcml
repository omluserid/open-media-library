<Mcml xmlns="http://schemas.microsoft.com/2006/mcml" 
      xmlns:cor ="assembly://MsCorLib/System" 
      xmlns:coll="assembly://MsCorLib/System.Collections" 
      xmlns:shl ="assembly://Library/Library.Code.V3" 
      xmlns:me ="Me">
  <Aggregate Source="resx://Library/Library.Resources/V3_Controls_BrowsePivotItem"/>
  <Aggregate Source="resx://Library/Library.Resources/V3_Controls_BrowseAnimations"/>
  <!--UI Name="PivotList" Behavior="shl:KeyNavigateBehavior"-->
  <UI Name="PivotList">
    <Properties>
      <cor:Boolean Name="RightHandlerInvoked" Boolean="false" />
      <cor:Boolean Name="LeftHandlerInvoked" Boolean="false" />
      <Choice Name="Pivots" Choice="$Required"/>
      <!--shl:MenuData Name="SortMenu" MenuData="$Required"/-->
      <EditableText Name="FocusArea" EditableText="$Required"/>
      <EditableText Name="NavigationDirection" EditableText="$Required"/>
      <EditableText Name="TransitionState" EditableText="$Required"/>
      <Image Name="PivotArrowLeftFocus" Source="res://ehres!Pivot.Arrow.Left.png" Flippable="true" />
      <Image Name="PivotArrowLeftNoFocus" Source="res://ehres!Pivot.Arrow.Left.NoFocus.png" Flippable="true" />
      <Image Name="PivotArrowLeftDormant" Source="res://ehres!Pivot.Arrow.Left.Dormant.png" Flippable="true" />
      <Image Name="PivotArrowLeftDim" Source="res://ehres!Pivot.Arrow.Left.Dim.png" Flippable="true" />
      <Image Name="PivotArrowRightFocus" Source="res://ehres!Pivot.Arrow.Right.png" Flippable="true" />
      <Image Name="PivotArrowRightNoFocus" Source="res://ehres!Pivot.Arrow.Right.NoFocus.png" Flippable="true" />
      <Image Name="PivotArrowRightDormant" Source="res://ehres!Pivot.Arrow.Right.Dormant.png" Flippable="true" />
      <Image Name="PivotArrowRightDim" Source="res://ehres!Pivot.Arrow.Right.Dim.png" Flippable="true" />
      <!--ScrollingData Name="ScrollData" ScrollingData="$Required" LockedPosition="0.0" LockedAlignment="0.0" /-->
      <ScrollingData Name="ScrollData" ScrollingData="$Required" />
      <shl:ScrollingDataHelper Name="ScrollingDataHelper"></shl:ScrollingDataHelper>
    </Properties>
    <Locals>
      <!-- new-->
      <shl:ScrollIntoViewDisposition Name="shlScrollIntoViewDisposition" LockedPosition="0.0" LockedAlignment="0.0"/>
      <KeyHandler Handle="true" HandlerStage="Direct" Name="RightHandler" Key="Right" />
      <KeyHandler Handle="true" HandlerStage="Direct" Name="LeftHandler" Key="Left" />
      <KeyHandler Handle="true" HandlerStage="Direct" Name="DownHandler" Key="Enter" />
      <ScrollingHandler Name="ScrollingHandler" ScrollingData="[ScrollData]"
                        HandlerStage="Bubbled"/>
      
      <!-- end new-->
      <Environment Name="Environment"/>
      <!--ScrollingData Name="ScrollData">
        <ScrollIntoViewDisposition>
          <ScrollIntoViewDisposition LockedPosition="0.0" LockedAlignment="0.0"/>
        </ScrollIntoViewDisposition>
      </ScrollingData-->
      <Command Name="PivotInvoked" Description="Pivot Invoked Command"/>
      <IntRangedValue Name="SelectedIndex"/>
      <shl:WrappedIndexTransformer Name="IndexTransformer"/>
      <Command Name="ScrollUpCommand"/>
      <Command Name="ScrollDownCommand"/>
      <FlowLayout Name="FlowLayout" Orientation="Horizontal" Repeat="Always" RepeatGap="0,0" Spacing="0,0"/>
      <MajorMinor Name="ItemGap" MajorMinor="62,0"/>
      <MajorMinor Name="LoopGap" MajorMinor="220,0"/>
      <Command Name="PivotArrow"/>
      <IntRangedValue Name="TotalChars" Value="0"/>
      <Size Name="MaxWidth" Size="0,0"/>
      <cor:Int32 Name="CharWidth" Int32="14" />
      <cor:Int32 Name="TotalCharWidth" Int32="0" />
      <cor:Int32 Name="NumGaps" Int32="0" />
      <cor:Int32 Name="TotalGapWidth" Int32="0" />
      <cor:Int32 Name="TotalWidth" Int32="0" />
      <MathTransformer Name="Multiplier" />
      <MathTransformer Name="Adder" />
      <cor:Boolean Name="CalculateWidth" Boolean="true" />
    </Locals>
    <Rules>
      <Rule>
        <Conditions>
          <IsValid Source="[ScrollData]"/>
          <!--Equality Source="[ScrollingDataHelper.Loaded]" Value="false" /-->
        </Conditions>
        <Actions>
          <Invoke Target="[ScrollingDataHelper.SetScrollIntoViewDisposition]" ScrollingData="[ScrollData]" ScrollIntoViewDisposition="[shlScrollIntoViewDisposition]"/>
        </Actions>
      </Rule>
      
      <Binding Source="[LoopGap]" Target="[FlowLayout.RepeatGap]"/>
      <Binding Source="[ItemGap]" Target="[FlowLayout.Spacing]"/>
      <Binding Source="[ScrollData]" Target="[Scroller.ScrollingData]"/>
      <Default Target="[Input.Enabled]" Value="true"/>
      <Default Target="[Accessible.IsFocused]" Value="true"/>
      <!--Changed Source="[Pivots.Chosen!shl:IBrowsePivot.Description]">
        <Actions>
          <Set Target="[Accessible.Value]" Value="[Pivots.Chosen!shl:IBrowsePivot.Description]"/>
          <Invoke Target="[Accessible.SimulateFocus]" InvokePolicy="Synchronous"/>
        </Actions>
      </Changed-->
      <Condition Source="[Pivots.Options.Count]" ConditionOp="LessThan" SourceValue="2">
        <Actions>
          <Set Target="[Repeater.Visible]" Value="false"/>
          <Set Target="[Input.Enabled]" Value="false"/>
        </Actions>
      </Condition>
      <Condition Source="[Pivots.Options.Count]" ConditionOp="LessThan" SourceValue="4">
        <Actions>
          <Set Target="[FlowLayout.Repeat]" Value="Never"/>
          <Set Target="[SelectedIndex.MinValue]" Value="0"/>
          <Set Target="[SelectedIndex.MaxValue]" Value="[Pivots.Options.Count]">
            <Transformer>
              <MathTransformer Subtract="1"/>
            </Transformer>
          </Set>
          <Set Target="[Scroller.FadeSize]" Value="0" />
          <Set Target="[CalculateWidth]" Value="false" />
        </Actions>
      </Condition>
      <Binding Source="[Pivots.Options]" Target="[Repeater.Source]"/>
      <!--Rule>
        <Conditions>
          <Modified Source="[Input.DeepMouseFocus]"/>
          <Equality Source="[Input.DeepKeyFocus]" ConditionOp="NotEquals" Value="true"/>
        </Conditions>
        <Actions>
          <Invoke Target="[Input.RequestKeyFocus]"/>
        </Actions>
      </Rule-->
      <!--Changed Source="[PivotInvoked.Invoked]">
        <Actions>
          <Invoke Target="[Input.NavigateDirection]" direction="South"/>
        </Actions>
      </Changed-->
      <Default Target="[Scroller.MaximumSize]" Value="0,0"/>
      <Condition Source="[FocusArea.Value]" SourceValue="Gallery">
        <Actions>
          <Set Target="[LeftArrow.Content]" Value="[PivotArrowLeftDormant]"/>
          <Set Target="[RightArrow.Content]" Value="[PivotArrowRightDormant]"/>
        </Actions>
      </Condition>
      <Rule>
        <Conditions>
          <Equality Source="[SelectedIndex.HasPreviousValue]" Value="false"/>
          <Equality Source="[FocusArea.Value]" Value="Pivot"/>
        </Conditions>
        <Actions>
          <Set Target="[LeftArrow.Content]" Value="[PivotArrowLeftDim]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[SelectedIndex.HasNextValue]" Value="false"/>
          <Equality Source="[FocusArea.Value]" Value="Pivot"/>
        </Conditions>
        <Actions>
          <Set Target="[RightArrow.Content]" Value="[PivotArrowRightDim]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Modified Source="[Pivots.ChosenIndex]" InitialEvaluate="true"/>
          <Equality Source="[SelectedIndex.Value]" ConditionOp="NotEquals" Value="[Pivots.ChosenIndex]" SourceTransformer="[IndexTransformer]"/>
        </Conditions>
        <Actions>
          <Set Target="[SelectedIndex.Value]" Value="[Pivots.ChosenIndex]"/>
        </Actions>
      </Rule>
      <Binding Source="[Pivots.Options.Count]" Target="[IndexTransformer.Count]"/>
      <Changed Source="[SelectedIndex.Value]">
        <Actions>
          <Set Target="[Pivots.ChosenIndex]" Value="[SelectedIndex.Value]" Transformer="[IndexTransformer]"/>
        </Actions>
      </Changed>
      <!--new -->
      <Changed Source="[NavigationDirection.Value]">
        <Conditions>
          <Equality Source="[NavigationDirection.Value]" ConditionOp="ChangedTo" Value="subright"/>
        </Conditions>
        <Actions>
          <DebugTrace Message="RIGHT: {0}">
            <Params>
              <ObjectPath ObjectPath="[NavigationDirection.Value]"/>
            </Params>
          </DebugTrace>
          <Invoke Target="[ScrollDownCommand.Invoke]"/>
        </Actions>
      </Changed>
      <Changed Source="[NavigationDirection.Value]">
        <Conditions>
          <Equality Source="[NavigationDirection.Value]" ConditionOp="ChangedTo" Value="subleft"/>
        </Conditions>
        <Actions>
          <DebugTrace Message="LEFT: {0}">
            <Params>
              <ObjectPath ObjectPath="[NavigationDirection.Value]"/>
            </Params>
          </DebugTrace>
          <Invoke Target="[ScrollUpCommand.Invoke]"/>
        </Actions>
      </Changed>
      <!--Changed Source="[RightHandlerInvoked]">
        <Conditions>
          <Equality Source="[RightHandlerInvoked]" ConditionOp="Equals" Value="true"/>
        </Conditions>
        <Actions>
          <DebugTrace Message="!!!: {0}">
            <Params>
              <ObjectPath ObjectPath="[NavigationDirection.Value]"/>
            </Params>
          </DebugTrace>
        </Actions>
      </Changed>
      <Changed Source="[LeftHandlerInvoked]">
        <Conditions>
          <Equality Source="[LeftHandlerInvoked]" ConditionOp="Equals" Value="true"/>
        </Conditions>
        <Actions>
          <DebugTrace Message="!!!: {0}">
            <Params>
              <ObjectPath ObjectPath="[NavigationDirection.Value]"/>
            </Params>
          </DebugTrace>
          <Set Target="[LeftHandlerInvoked]" Value="false"/>
        </Actions>
      </Changed-->

      <!--Condition Source="[RightHandler.Pressing]" SourceValue="true">
        <Actions>
          <DebugTrace Message="Pivots.NavigationDirection.Value(scrollright): {0}">
            <Params>
              <ObjectPath ObjectPath="[NavigationDirection.Value]"/>
            </Params>
          </DebugTrace>
          <Set Target="[NavigationDirection.Value]" Value="right"/-->
          <!--PlayAnimation Target="[RightArrow]" Animation="animation://me:Browse.Pivots.Arrow.Right.Jiggle"/-->
      <!--Invoke Target="[ScrollDownCommand.Invoke]"/-->
          <!--Invoke Target="[ScrollData.ScrollDown]"/-->
      <!--/Actions>
      </Condition>
      <Condition Source="[LeftHandler.Pressing]" SourceValue="true">
        <Actions>
          <DebugTrace Message="Pivots.NavigationDirection.Value(scrollleft): {0}">
            <Params>
              <ObjectPath ObjectPath="[NavigationDirection.Value]"/>
            </Params>
          </DebugTrace>
          <Set Target="[NavigationDirection.Value]" Value="left"/-->
          <!--PlayAnimation Target="[LeftArrow]" Animation="animation://me:Browse.Pivots.Arrow.Left.Jiggle"/-->
      <!--Invoke Target="[ScrollUpCommand.Invoke]"/-->
          <!--Invoke Target="[ScrollData.ScrollUp]"/-->
      <!--/Actions>
      </Condition-->
      <Changed Source="[PivotInvoked.Invoked]">
        <Actions>
          <Set Target="[FocusArea.Value]" Value="Gallery"/>
        </Actions>
      </Changed>
      <Condition Source="[DownHandler.Pressing]" SourceValue="true">
        <Actions>
          <Set Target="[FocusArea.Value]" Value="Gallery"/>
        </Actions>
      </Condition>
      <!--end new-->
      <!--Rule>
        <Conditions>
          <Equality Source="[Environment.IsRightToLeft]" Value="true"/>
          <Modified Source="[Input.HandledMouseWheelNegative]"/>
        </Conditions>
        <Actions>
          <Invoke Target="[ScrollUpCommand.Invoke]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[Environment.IsRightToLeft]" Value="true"/>
          <Modified Source="[Input.HandledKeyRight]"/>
        </Conditions>
        <Actions>
          <Invoke Target="[ScrollUpCommand.Invoke]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[Environment.IsRightToLeft]" Value="true"/>
          <Modified Source="[Input.HandledMouseWheelPositive]"/>
        </Conditions>
        <Actions>
          <Invoke Target="[ScrollDownCommand.Invoke]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[Environment.IsRightToLeft]" Value="true"/>
          <Modified Source="[Input.HandledKeyLeft]"/>
        </Conditions>
        <Actions>
          <Invoke Target="[ScrollDownCommand.Invoke]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[Environment.IsRightToLeft]" Value="false"/>
          <Modified Source="[Input.HandledMouseWheelNegative]"/>
        </Conditions>
        <Actions>
          <Invoke Target="[ScrollDownCommand.Invoke]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[Environment.IsRightToLeft]" Value="false"/>
          <Modified Source="[Input.HandledKeyRight]"/>
        </Conditions>
        <Actions>
          <Invoke Target="[ScrollDownCommand.Invoke]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[Environment.IsRightToLeft]" Value="false"/>
          <Modified Source="[Input.HandledMouseWheelPositive]"/>
        </Conditions>
        <Actions>
          <Invoke Target="[ScrollUpCommand.Invoke]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[Environment.IsRightToLeft]" Value="false"/>
          <Modified Source="[Input.HandledKeyLeft]"/>
        </Conditions>
        <Actions>
          <Invoke Target="[ScrollUpCommand.Invoke]"/>
        </Actions>
      </Rule-->
      <Rule>
        <Conditions>
          <Modified Source="[ScrollDownCommand.Invoked]"/>
        </Conditions>
        <Actions>
          <!--Invoke Target="[SelectedIndex.NextValue]"/-->
          <Set Target="[NavigationDirection.Value]" Value="none" ExclusiveApply="false"/>
          <Set Target="[NavigationDirection.Value]" Value="right"/>
          <DebugTrace Message="Pivots.NavigationDirection.Value(scrollrightinv): {0}">
            <Params>
              <ObjectPath ObjectPath="[NavigationDirection.Value]"/>
            </Params>
          </DebugTrace>
          <PlayAnimation Target="[RightArrow]" Animation="animation://me:Browse.Pivots.Arrow.Right.Jiggle"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Modified Source="[ScrollUpCommand.Invoked]"/>
        </Conditions>
        <Actions>
          <!--Invoke Target="[SelectedIndex.PreviousValue]"/-->
          <Set Target="[NavigationDirection.Value]" Value="none" ExclusiveApply="false"/>
          <Set Target="[NavigationDirection.Value]" Value="left"/>
          <DebugTrace Message="Pivots.NavigationDirection.Value(scrollleftinv): {0}">
            <Params>
              <ObjectPath ObjectPath="[NavigationDirection.Value]"/>
            </Params>
          </DebugTrace>
          <PlayAnimation Target="[LeftArrow]" Animation="animation://me:Browse.Pivots.Arrow.Left.Jiggle"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[FocusArea.Value]" ConditionOp="NotEquals" Value="Pivot"/>
        </Conditions>
        <Actions>
          <!-- todo:fix-->
          <DebugTrace Message="detachRIGHT: {0}">
            <Params>
              <ObjectPath ObjectPath="[SelectedIndex.Value]"/>
            </Params>
          </DebugTrace>
          <Invoke Target="[RightArrow.DetachAnimation]" type="Move"/>
        </Actions>
      </Rule>
      <Changed Source="[SelectedIndex.Value]">
        <Actions>
          <DebugTrace Message="SelectedIndex.Value rightarrow attach: {0}">
            <Params>
              <ObjectPath ObjectPath="[SelectedIndex.Value]"/>
            </Params>
          </DebugTrace>
          <PlayAnimation Target="[LeftArrow]" Animation="animation://me:Browse.Pivots.Arrow.Move"/>
          <Invoke Target="[RightArrow.AttachAnimation]" animation="animation://me:Browse.Pivots.Arrow.Move" InvokePolicy="Synchronous"/>
          <Invoke Target="[RightArrow.DetachAnimation]" type="Move" InvokePolicy="AsynchronousLowPri"/>
        </Actions>
      </Changed>
      <Rule>
        <Conditions>
          <Modified Source="[SelectedIndex.Value]"/>
        </Conditions>
        <Actions>
          <PlaySound Sound="res://ehres!Focus_a.wav" />
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[FocusArea.Value]" ConditionOp="NotEquals" Value="Pivot"/>
          <Equality Source="[TransitionState.Value]" Value="Idle"/>
        </Conditions>
        <Actions>
          <Set Target="[PivotPanel.Scale]" Value="1.0, 1.0, 1.0"/>
          <Set Target="[LeftArrow.Content]" Value="[PivotArrowLeftNoFocus]"/>
          <Set Target="[RightArrow.Content]" Value="[PivotArrowRightNoFocus]"/>
          <Set Target="[Scroller.FadeSize]" Value="50"/>
          <Set Target="[Scroller.NearOffset]" Value="-220"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[FocusArea.Value]" Value="Pivot"/>
          <Equality Source="[TransitionState.Value]" Value="Idle"/>
        </Conditions>
        <Actions>
          <Set Target="[PivotPanel.Scale]" Value="1.06, 1.06, 1.0"/>
          <Set Target="[LeftArrow.Content]" Value="[PivotArrowLeftFocus]"/>
          <Set Target="[RightArrow.Content]" Value="[PivotArrowRightFocus]"/>
          <Set Target="[Scroller.FadeSize]" Value="10"/>
          <Set Target="[Scroller.NearOffset]" Value="-210"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[Input.DeepKeyFocus]" Value="true"/>
          <Equality Source="[TransitionState.Value]" Value="Idle"/>
        </Conditions>
        <Actions>
          <Set Target="[FocusArea.Value]" Value="Pivot"/>
        </Actions>
      </Rule>
      <Condition Source="[TransitionState.Value]" SourceValue="NavigatingToForward">
        <Actions>
          <DebugTrace Message="navforward: {0}">
            <Params>
              <ObjectPath ObjectPath="[SelectedIndex.Value]"/>
            </Params>
          </DebugTrace>
          <Invoke Target="[LeftArrow.AttachAnimation]" animation="animation://me:Browse.Pivots.Arrow.NavigateToForward" InvokePolicy="Synchronous"/>
          <!--Invoke Target="[RightArrow.AttachAnimation]" animation="animation://me:Browse.Pivots.Arrow.NavigateToForward" InvokePolicy="Synchronous"/-->
          <Invoke Target="[Repeater.AttachAnimation]" animation="animation://me:Browse.Pivots.Panel.NavigateToForward" InvokePolicy="Synchronous"/>
        </Actions>
      </Condition>
      <Condition Source="[TransitionState.Value]" SourceValue="NavigatingToBackward">
        <Actions>
          <DebugTrace Message="navbackward: {0}">
            <Params>
              <ObjectPath ObjectPath="[SelectedIndex.Value]"/>
            </Params>
          </DebugTrace>
          <Invoke Target="[LeftArrow.AttachAnimation]" animation="animation://me:Browse.Pivots.Arrow.NavigateToBackward" InvokePolicy="Synchronous"/>
          <Invoke Target="[RightArrow.AttachAnimation]" animation="animation://me:Browse.Pivots.Arrow.NavigateToBackward" InvokePolicy="Synchronous"/>
          <Invoke Target="[Repeater.AttachAnimation]" animation="animation://me:Browse.Pivots.Panel.NavigateToBackward" InvokePolicy="Synchronous"/>
        </Actions>
      </Condition>
      <Rule ConditionLogicalOp="Or">
        <Conditions>
          <Equality Source="[TransitionState.Value]" Value="NavigatingAwayForward"/>
          <Equality Source="[TransitionState.Value]" Value="NavigatingAwayBackward"/>
        </Conditions>
        <Actions>
          <DebugTrace Message="navforward-backward: {0}">
            <Params>
              <ObjectPath ObjectPath="[SelectedIndex.Value]"/>
            </Params>
          </DebugTrace>
          <Invoke Target="[LeftArrow.AttachAnimation]" animation="animation://me:Browse.Pivots.Arrow.NavigateAway" InvokePolicy="Synchronous"/>
          <Invoke Target="[RightArrow.AttachAnimation]" animation="animation://me:Browse.Pivots.Arrow.NavigateAway" InvokePolicy="Synchronous"/>
        </Actions>
      </Rule>
      <Condition Source="[TransitionState.Value]" SourceValue="NavigatingAwayForward">
        <Actions>
          <Invoke Target="[Repeater.AttachAnimation]" animation="animation://me:Browse.Pivots.Panel.NavigateAwayForward" InvokePolicy="Synchronous"/>
        </Actions>
      </Condition>
      <Condition Source="[TransitionState.Value]" SourceValue="NavigatingAwayBackward">
        <Actions>
          <Invoke Target="[Repeater.AttachAnimation]" animation="animation://me:Browse.Pivots.Panel.NavigateAwayBackward" InvokePolicy="Synchronous"/>
        </Actions>
      </Condition>
      <!--Default Target="[Input.HandleMouseWheel]" Value="true"/-->
      <!--Default Target="[Input.HandleHorizontal]" Value="true"/-->
      <Default Target="[Input.CreateInterestOnFocus]" Value="false"/>
      <Default Target="[Input.KeyInteractive]" Value="true"/>
      <!--Default Target="[Input.Model]" Value="[PivotInvoked]"/-->
      <Rule>
        <Actions>
          <Set Target="[NumGaps]" Value="[Pivots.Options.Count]" ExclusiveApply="false">
            <Transformer>
              <MathTransformer SubtractInt="1"/>
            </Transformer>
          </Set>
          <Set Target="[Multiplier.MultiplyInt]" Value="[ItemGap.Major]" ExclusiveApply="false"/>
          <Set Target="[TotalGapWidth]" Value="[NumGaps]" Transformer="[Multiplier]" ExclusiveApply="false"/>
        </Actions>
      </Rule>
      <Changed Source="[TotalChars.Value]">
        <Conditions>
          <Equality Source="[CalculateWidth]" Value="true"/>
        </Conditions>
        <Actions>
          <Set Target="[Multiplier.MultiplyInt]" Value="[CharWidth]" ExclusiveApply="false"/>
          <Set Target="[TotalCharWidth]" Value="[TotalChars.Value]" Transformer="[Multiplier]"/>
        </Actions>
      </Changed>
      <Changed Source="[TotalCharWidth]">
        <Actions>
          <Set Target="[TotalWidth]" Value="[TotalCharWidth]" ExclusiveApply="false" />
          <Set Target="[Adder.AddInt]" Value="[TotalGapWidth]"/>
          <Set Target="[TotalWidth]" Value="[TotalWidth]" Transformer="[Adder]"/>
          <Set Target="[MaxWidth.Width]" Value="[TotalWidth]"/>
          <Set Target="[PivotPanel.MaximumSize]" Value="[MaxWidth]"/>
          <Set Target="[PivotPanel.MinimumSize]" Value="[MaxWidth]"/>
        </Actions>
      </Changed>
      <Changed Source="[TotalWidth]">
        <Conditions>
          <Equality Source="[Environment.IsWidescreen]" ConditionOp="Equals" Value="false"/>
          <Equality Source="[TotalWidth]" ConditionOp="GreaterThan" Value="750"/>
        </Conditions>
        <Actions>
          <Set Target="[TotalWidth]" Value="0"/>
          <Set Target="[MaxWidth.Width]" Value="[TotalWidth]"/>
          <Set Target="[PivotPanel.MaximumSize]" Value="[MaxWidth]"/>
          <Set Target="[PivotPanel.MinimumSize]" Value="[MaxWidth]"/>
        </Actions>
      </Changed>
      <Changed Source="[TotalWidth]">
        <Conditions>
          <Equality Source="[Environment.IsWidescreen]" ConditionOp="Equals" Value="true"/>
          <Equality Source="[TotalWidth]" ConditionOp="GreaterThan" Value="990"/>
        </Conditions>
        <Actions>
          <Set Target="[TotalWidth]" Value="0"/>
          <Set Target="[MaxWidth.Width]" Value="[TotalWidth]"/>
          <Set Target="[PivotPanel.MaximumSize]" Value="[MaxWidth]"/>
          <Set Target="[PivotPanel.MinimumSize]" Value="[MaxWidth]"/>
        </Actions>
      </Changed>
      <Rule>
        <Conditions>
          <Equality Source="[FocusArea.Value]" Value="Pivot"/>
        </Conditions>
        <Actions>
          <Set Target="[CalculateWidth]" Value="false" />
        </Actions>
      </Rule>
      <!--Condition Source="[Environment.Is2DAnimationExperience]" SourceValue="true">
        <Actions>
          <Invoke Target="[PivotPanel.DetachAnimation]" type="Scale" InvokePolicy="Synchronous"/>
          <Invoke Target="[PivotPanel.AttachAnimation]" animation="animation://me:Browse.Pivots.PipGainFocus.Scale.GDI" InvokePolicy="Synchronous" ExclusiveApply="false"/>
        </Actions>
      </Condition-->
      <!--Rule>
        <Conditions>
          <Modified Source="[Input.DeepKeyFocus]" InitialEvaluate="true"/>
          <Equality Source="[Input.DeepKeyFocus]" Value="false"/>
          <Equality Source="[Environment.Is2DAnimationExperience]" Value="true"/>
        </Conditions>
        <Actions>
          <Invoke Target="[PivotRepeaterWrapper.DetachAnimation]" type="Move" InvokePolicy="Synchronous"/>
        </Actions>
      </Rule-->
      <!--Rule>
        <Conditions>
          <Modified Source="[Input.DeepKeyFocus]" InitialEvaluate="true"/>
          <Equality Source="[Input.DeepKeyFocus]" Value="true"/>
          <Equality Source="[Environment.Is2DAnimationExperience]" Value="true"/>
        </Conditions>
        <Actions>
          <Invoke Target="[PivotRepeaterWrapper.AttachAnimation]" animation="animation://me:Browse.Pivots.Panel.Move" InvokePolicy="AsynchronousLowPri" />
        </Actions>
      </Rule-->
    </Rules>
    <Content>
      <Panel Name="PivotPanel" Scale="1.0, 1.0, 1.0" Layout="Anchor">
        <Animations>
          <Animation Animation="animation://me:Browse.Pivots.PipGainFocus.Scale"/>
        </Animations>
        <Children>
          <Graphic Name="LeftArrow" Content="[PivotArrowLeftNoFocus]">
            <LayoutInput>
              <AnchorLayoutInput Left="Scroller, 0, -999" Right="Scroller, 0, -10" Horizontal="Far" Top="Scroller, 0, 10" ContributesToWidth="false" ContributesToHeight="false"/>
            </LayoutInput>
          </Graphic>
          <Graphic Name="RightArrow" Content="[PivotArrowRightNoFocus]">
            <LayoutInput>
              <AnchorLayoutInput Left="Focus, 1, 10" Horizontal="Near" Top="Scroller, 0, 10" ContributesToWidth="false" ContributesToHeight="false"/>
            </LayoutInput>
          </Graphic>
          <Scroller Name="Scroller" Orientation="Horizontal" FadeSize="10" NearOffset="-210" FarOffset="0">
            <LayoutInput>
              <AnchorLayoutInput Horizontal="Near" Vertical="Near"/>
            </LayoutInput>
            <Children>
              <Panel Name="PivotRepeaterWrapper">
                <Animations>
                  <Animation Animation="animation://me:Browse.Pivots.Panel.Move"/>
                </Animations>
                <Children>
                  <Repeater Name="Repeater" MouseInteractive="true" DiscardOffscreenVisuals="true" Visible="true" Layout="[FlowLayout]" Navigation="RememberFocus">
                    <Content>
                      <me:PivotButton Option="[RepeatedItem!shl:BrowsePivot]" Pivots="[Pivots]" PivotInvoked="[PivotInvoked]"
                                    SelectedIndex="[SelectedIndex]" Index="[RepeatedItemIndex]" FocusArea="[FocusArea]"
                                    NavigationDirection="[NavigationDirection]" TransitionState="[TransitionState]" TotalChars="[TotalChars]" RightHandlerInvoked="[RightHandlerInvoked]" LeftHandlerInvoked="[LeftHandlerInvoked]">
                        <Animations>
                          <Animation Animation="animation://me:Browse.Pivots.Item.Move"/>
                        </Animations>
                      </me:PivotButton>
                    </Content>
                  </Repeater>
                </Children>
              </Panel>
            </Children>
          </Scroller>
        </Children>
      </Panel>
    </Content>
  </UI>
</Mcml>