#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OMLEngine.Dao
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="OML")]
	internal partial class OMLDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGenreMetaData(GenreMetaData instance);
    partial void UpdateGenreMetaData(GenreMetaData instance);
    partial void DeleteGenreMetaData(GenreMetaData instance);
    partial void InsertGenre(Genre instance);
    partial void UpdateGenre(Genre instance);
    partial void DeleteGenre(Genre instance);
    partial void InsertTitle(Title instance);
    partial void UpdateTitle(Title instance);
    partial void DeleteTitle(Title instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertBioData(BioData instance);
    partial void UpdateBioData(BioData instance);
    partial void DeleteBioData(BioData instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    partial void InsertDisk(Disk instance);
    partial void UpdateDisk(Disk instance);
    partial void DeleteDisk(Disk instance);
    #endregion
		
		public OMLDataDataContext() : 
				base(global::OMLEngine.Properties.Settings.Default.OMLConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public OMLDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OMLDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OMLDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OMLDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		internal System.Data.Linq.Table<GenreMetaData> GenreMetaDatas
		{
			get
			{
				return this.GetTable<GenreMetaData>();
			}
		}
		
		internal System.Data.Linq.Table<Genre> Genres
		{
			get
			{
				return this.GetTable<Genre>();
			}
		}
		
		internal System.Data.Linq.Table<Title> Titles
		{
			get
			{
				return this.GetTable<Title>();
			}
		}
		
		internal System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		internal System.Data.Linq.Table<BioData> BioDatas
		{
			get
			{
				return this.GetTable<BioData>();
			}
		}
		
		internal System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
		
		internal System.Data.Linq.Table<Disk> Disks
		{
			get
			{
				return this.GetTable<Disk>();
			}
		}
	}
	
	[Table(Name="dbo.GenreMetaData")]
	internal partial class GenreMetaData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private System.Data.Linq.Binary _Photo;
		
		private long _Id;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhotoChanging(System.Data.Linq.Binary value);
    partial void OnPhotoChanged();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    #endregion
		
		public GenreMetaData()
		{
			OnCreated();
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Photo", DbType="Image", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Genres")]
	internal partial class Genre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TitleId;
		
		private long _GenreMetaDataId;
		
		private long _Id;
		
		private EntityRef<GenreMetaData> _GenreMetaData;
		
		private EntityRef<Title> _Title;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTitleIdChanging(int value);
    partial void OnTitleIdChanged();
    partial void OnGenreMetaDataIdChanging(long value);
    partial void OnGenreMetaDataIdChanged();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    #endregion
		
		public Genre()
		{
			this._GenreMetaData = default(EntityRef<GenreMetaData>);
			this._Title = default(EntityRef<Title>);
			OnCreated();
		}
		
		[Column(Storage="_TitleId", DbType="Int NOT NULL")]
		public int TitleId
		{
			get
			{
				return this._TitleId;
			}
			set
			{
				if ((this._TitleId != value))
				{
					if (this._Title.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTitleIdChanging(value);
					this.SendPropertyChanging();
					this._TitleId = value;
					this.SendPropertyChanged("TitleId");
					this.OnTitleIdChanged();
				}
			}
		}
		
		[Column(Storage="_GenreMetaDataId", DbType="BigInt NOT NULL")]
		public long GenreMetaDataId
		{
			get
			{
				return this._GenreMetaDataId;
			}
			set
			{
				if ((this._GenreMetaDataId != value))
				{
					if (this._GenreMetaData.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenreMetaDataIdChanging(value);
					this.SendPropertyChanging();
					this._GenreMetaDataId = value;
					this.SendPropertyChanged("GenreMetaDataId");
					this.OnGenreMetaDataIdChanged();
				}
			}
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Association(Name="GenreMetaData_Genre", Storage="_GenreMetaData", ThisKey="GenreMetaDataId", OtherKey="Id", IsForeignKey=true)]
		public GenreMetaData MetaData
		{
			get
			{
				return this._GenreMetaData.Entity;
			}
			set
			{
				if ((this._GenreMetaData.Entity != value))
				{
					this.SendPropertyChanging();
					this._GenreMetaData.Entity = value;
					this.SendPropertyChanged("MetaData");
				}
			}
		}
		
		[Association(Name="Title_Genre", Storage="_Title", ThisKey="TitleId", OtherKey="Id", IsForeignKey=true)]
		public Title Title
		{
			get
			{
				return this._Title.Entity;
			}
			set
			{
				Title previousValue = this._Title.Entity;
				if (((previousValue != value) 
							|| (this._Title.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Title.Entity = null;
						previousValue.Genres.Remove(this);
					}
					this._Title.Entity = value;
					if ((value != null))
					{
						value.Genres.Add(this);
						this._TitleId = value.Id;
					}
					else
					{
						this._TitleId = default(int);
					}
					this.SendPropertyChanged("Title");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Titles")]
	internal partial class Title : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private int _Id;
		
		private string _SortName;
		
		private System.Nullable<int> _WatchedCount;
		
		private string _MetaDataSource;
		
		private string _FrontCoverImage;
		
		private string _MenuImage;
		
		private string _BackCoverImage;
		
		private System.Nullable<short> _Runtime;
		
		private string _ParentalRating;
		
		private string _Synopsis;
		
		private string _Studio;
		
		private string _CountryOfOrgin;
		
		private string _WebsiteUrl;
		
		private System.Nullable<System.DateTime> _ReleaseDate;
		
		private System.Nullable<System.DateTime> _DateAdded;
		
		private string _AudioTracks;
		
		private System.Nullable<byte> _UserRating;
		
		private string _AspectRatio;
		
		private string _VideoStandard;
		
		private string _UPC;
		
		private string _Trailers;
		
		private string _ParentalRatingReason;
		
		private string _VideoDetails;
		
		private string _Subtitles;
		
		private string _VideoResolution;
		
		private string _OriginalName;
		
		private string _ImporterSource;
		
		private EntitySet<Genre> _Genres;
		
		private EntitySet<Person> _Peoples;
		
		private EntitySet<Tag> _Tags;
		
		private EntitySet<Disk> _Disks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSortNameChanging(string value);
    partial void OnSortNameChanged();
    partial void OnWatchedCountChanging(System.Nullable<int> value);
    partial void OnWatchedCountChanged();
    partial void OnMetaDataSourceChanging(string value);
    partial void OnMetaDataSourceChanged();
    partial void OnFrontCoverPathChanging(string value);
    partial void OnFrontCoverPathChanged();
    partial void OnFrontCoverMenuPathChanging(string value);
    partial void OnFrontCoverMenuPathChanged();
    partial void OnBackCoverPathChanging(string value);
    partial void OnBackCoverPathChanged();
    partial void OnRuntimeChanging(System.Nullable<short> value);
    partial void OnRuntimeChanged();
    partial void OnParentalRatingChanging(string value);
    partial void OnParentalRatingChanged();
    partial void OnSynopsisChanging(string value);
    partial void OnSynopsisChanged();
    partial void OnStudioChanging(string value);
    partial void OnStudioChanged();
    partial void OnCountryOfOriginChanging(string value);
    partial void OnCountryOfOriginChanged();
    partial void OnWebsiteUrlChanging(string value);
    partial void OnWebsiteUrlChanged();
    partial void OnReleaseDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReleaseDateChanged();
    partial void OnDateAddedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateAddedChanged();
    partial void OnAudioTracksChanging(string value);
    partial void OnAudioTracksChanged();
    partial void OnUserRatingChanging(System.Nullable<byte> value);
    partial void OnUserRatingChanged();
    partial void OnAspectRatioChanging(string value);
    partial void OnAspectRatioChanged();
    partial void OnVideoStandardChanging(string value);
    partial void OnVideoStandardChanged();
    partial void OnUPCChanging(string value);
    partial void OnUPCChanged();
    partial void OnTrailersChanging(string value);
    partial void OnTrailersChanged();
    partial void OnParentalRatingReasonChanging(string value);
    partial void OnParentalRatingReasonChanged();
    partial void OnVideoDetailsChanging(string value);
    partial void OnVideoDetailsChanged();
    partial void OnSubtitlesChanging(string value);
    partial void OnSubtitlesChanged();
    partial void OnVideoResolutionChanging(string value);
    partial void OnVideoResolutionChanged();
    partial void OnOriginalNameChanging(string value);
    partial void OnOriginalNameChanged();
    partial void OnImporterSourceChanging(string value);
    partial void OnImporterSourceChanged();
    #endregion
		
		public Title()
		{
			this._Genres = new EntitySet<Genre>(new Action<Genre>(this.attach_Genres), new Action<Genre>(this.detach_Genres));
			this._Peoples = new EntitySet<Person>(new Action<Person>(this.attach_Peoples), new Action<Person>(this.detach_Peoples));
			this._Tags = new EntitySet<Tag>(new Action<Tag>(this.attach_Tags), new Action<Tag>(this.detach_Tags));
			this._Disks = new EntitySet<Disk>(new Action<Disk>(this.attach_Disks), new Action<Disk>(this.detach_Disks));
			OnCreated();
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SortName", DbType="NVarChar(255) NOT NULL")]
		public string SortName
		{
			get
			{
				return this._SortName;
			}
			set
			{
				if ((this._SortName != value))
				{
					this.OnSortNameChanging(value);
					this.SendPropertyChanging();
					this._SortName = value;
					this.SendPropertyChanged("SortName");
					this.OnSortNameChanged();
				}
			}
		}
		
		[Column(Storage="_WatchedCount", DbType="Int")]
		public System.Nullable<int> WatchedCount
		{
			get
			{
				return this._WatchedCount;
			}
			set
			{
				if ((this._WatchedCount != value))
				{
					this.OnWatchedCountChanging(value);
					this.SendPropertyChanging();
					this._WatchedCount = value;
					this.SendPropertyChanged("WatchedCount");
					this.OnWatchedCountChanged();
				}
			}
		}
		
		[Column(Storage="_MetaDataSource", DbType="NVarChar(200)")]
		public string MetaDataSource
		{
			get
			{
				return this._MetaDataSource;
			}
			set
			{
				if ((this._MetaDataSource != value))
				{
					this.OnMetaDataSourceChanging(value);
					this.SendPropertyChanging();
					this._MetaDataSource = value;
					this.SendPropertyChanged("MetaDataSource");
					this.OnMetaDataSourceChanged();
				}
			}
		}
		
		[Column(Name="FrontCoverImagePath", Storage="_FrontCoverImage", DbType="nvarchar(255)", UpdateCheck=UpdateCheck.Never)]
		public string FrontCoverPath
		{
			get
			{
				return this._FrontCoverImage;
			}
			set
			{
				if ((this._FrontCoverImage != value))
				{
					this.OnFrontCoverPathChanging(value);
					this.SendPropertyChanging();
					this._FrontCoverImage = value;
					this.SendPropertyChanged("FrontCoverPath");
					this.OnFrontCoverPathChanged();
				}
			}
		}
		
		[Column(Name="MenuImagePath", Storage="_MenuImage", DbType="nvarchar(255)", UpdateCheck=UpdateCheck.Never)]
		public string FrontCoverMenuPath
		{
			get
			{
				return this._MenuImage;
			}
			set
			{
				if ((this._MenuImage != value))
				{
					this.OnFrontCoverMenuPathChanging(value);
					this.SendPropertyChanging();
					this._MenuImage = value;
					this.SendPropertyChanged("FrontCoverMenuPath");
					this.OnFrontCoverMenuPathChanged();
				}
			}
		}
		
		[Column(Name="BackCoverImagePath", Storage="_BackCoverImage", DbType="nvarchar(255)", UpdateCheck=UpdateCheck.Never)]
		public string BackCoverPath
		{
			get
			{
				return this._BackCoverImage;
			}
			set
			{
				if ((this._BackCoverImage != value))
				{
					this.OnBackCoverPathChanging(value);
					this.SendPropertyChanging();
					this._BackCoverImage = value;
					this.SendPropertyChanged("BackCoverPath");
					this.OnBackCoverPathChanged();
				}
			}
		}
		
		[Column(Storage="_Runtime", DbType="SmallInt")]
		public System.Nullable<short> Runtime
		{
			get
			{
				return this._Runtime;
			}
			set
			{
				if ((this._Runtime != value))
				{
					this.OnRuntimeChanging(value);
					this.SendPropertyChanging();
					this._Runtime = value;
					this.SendPropertyChanged("Runtime");
					this.OnRuntimeChanged();
				}
			}
		}
		
		[Column(Storage="_ParentalRating", DbType="NVarChar(20)")]
		public string ParentalRating
		{
			get
			{
				return this._ParentalRating;
			}
			set
			{
				if ((this._ParentalRating != value))
				{
					this.OnParentalRatingChanging(value);
					this.SendPropertyChanging();
					this._ParentalRating = value;
					this.SendPropertyChanged("ParentalRating");
					this.OnParentalRatingChanged();
				}
			}
		}
		
		[Column(Storage="_Synopsis", DbType="NVarChar(MAX)")]
		public string Synopsis
		{
			get
			{
				return this._Synopsis;
			}
			set
			{
				if ((this._Synopsis != value))
				{
					this.OnSynopsisChanging(value);
					this.SendPropertyChanging();
					this._Synopsis = value;
					this.SendPropertyChanged("Synopsis");
					this.OnSynopsisChanged();
				}
			}
		}
		
		[Column(Storage="_Studio", DbType="NVarChar(255)")]
		public string Studio
		{
			get
			{
				return this._Studio;
			}
			set
			{
				if ((this._Studio != value))
				{
					this.OnStudioChanging(value);
					this.SendPropertyChanging();
					this._Studio = value;
					this.SendPropertyChanged("Studio");
					this.OnStudioChanged();
				}
			}
		}
		
		[Column(Storage="_CountryOfOrgin", DbType="NVarChar(255)")]
		public string CountryOfOrigin
		{
			get
			{
				return this._CountryOfOrgin;
			}
			set
			{
				if ((this._CountryOfOrgin != value))
				{
					this.OnCountryOfOriginChanging(value);
					this.SendPropertyChanging();
					this._CountryOfOrgin = value;
					this.SendPropertyChanged("CountryOfOrigin");
					this.OnCountryOfOriginChanged();
				}
			}
		}
		
		[Column(Storage="_WebsiteUrl", DbType="NVarChar(255)")]
		public string WebsiteUrl
		{
			get
			{
				return this._WebsiteUrl;
			}
			set
			{
				if ((this._WebsiteUrl != value))
				{
					this.OnWebsiteUrlChanging(value);
					this.SendPropertyChanging();
					this._WebsiteUrl = value;
					this.SendPropertyChanged("WebsiteUrl");
					this.OnWebsiteUrlChanged();
				}
			}
		}
		
		[Column(Storage="_ReleaseDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> ReleaseDate
		{
			get
			{
				return this._ReleaseDate;
			}
			set
			{
				if ((this._ReleaseDate != value))
				{
					this.OnReleaseDateChanging(value);
					this.SendPropertyChanging();
					this._ReleaseDate = value;
					this.SendPropertyChanged("ReleaseDate");
					this.OnReleaseDateChanged();
				}
			}
		}
		
		[Column(Storage="_DateAdded", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[Column(Storage="_AudioTracks", DbType="NVarChar(255)")]
		public string AudioTracks
		{
			get
			{
				return this._AudioTracks;
			}
			set
			{
				if ((this._AudioTracks != value))
				{
					this.OnAudioTracksChanging(value);
					this.SendPropertyChanging();
					this._AudioTracks = value;
					this.SendPropertyChanged("AudioTracks");
					this.OnAudioTracksChanged();
				}
			}
		}
		
		[Column(Storage="_UserRating", DbType="TinyInt")]
		public System.Nullable<byte> UserRating
		{
			get
			{
				return this._UserRating;
			}
			set
			{
				if ((this._UserRating != value))
				{
					this.OnUserRatingChanging(value);
					this.SendPropertyChanging();
					this._UserRating = value;
					this.SendPropertyChanged("UserRating");
					this.OnUserRatingChanged();
				}
			}
		}
		
		[Column(Storage="_AspectRatio", DbType="NVarChar(5)")]
		public string AspectRatio
		{
			get
			{
				return this._AspectRatio;
			}
			set
			{
				if ((this._AspectRatio != value))
				{
					this.OnAspectRatioChanging(value);
					this.SendPropertyChanging();
					this._AspectRatio = value;
					this.SendPropertyChanged("AspectRatio");
					this.OnAspectRatioChanged();
				}
			}
		}
		
		[Column(Storage="_VideoStandard", DbType="NVarChar(10)")]
		public string VideoStandard
		{
			get
			{
				return this._VideoStandard;
			}
			set
			{
				if ((this._VideoStandard != value))
				{
					this.OnVideoStandardChanging(value);
					this.SendPropertyChanging();
					this._VideoStandard = value;
					this.SendPropertyChanged("VideoStandard");
					this.OnVideoStandardChanged();
				}
			}
		}
		
		[Column(Storage="_UPC", DbType="NVarChar(20)")]
		public string UPC
		{
			get
			{
				return this._UPC;
			}
			set
			{
				if ((this._UPC != value))
				{
					this.OnUPCChanging(value);
					this.SendPropertyChanging();
					this._UPC = value;
					this.SendPropertyChanged("UPC");
					this.OnUPCChanged();
				}
			}
		}
		
		[Column(Storage="_Trailers", DbType="NVarChar(255)")]
		public string Trailers
		{
			get
			{
				return this._Trailers;
			}
			set
			{
				if ((this._Trailers != value))
				{
					this.OnTrailersChanging(value);
					this.SendPropertyChanging();
					this._Trailers = value;
					this.SendPropertyChanged("Trailers");
					this.OnTrailersChanged();
				}
			}
		}
		
		[Column(Storage="_ParentalRatingReason", DbType="NVarChar(255)")]
		public string ParentalRatingReason
		{
			get
			{
				return this._ParentalRatingReason;
			}
			set
			{
				if ((this._ParentalRatingReason != value))
				{
					this.OnParentalRatingReasonChanging(value);
					this.SendPropertyChanging();
					this._ParentalRatingReason = value;
					this.SendPropertyChanged("ParentalRatingReason");
					this.OnParentalRatingReasonChanged();
				}
			}
		}
		
		[Column(Storage="_VideoDetails", DbType="NVarChar(MAX)")]
		public string VideoDetails
		{
			get
			{
				return this._VideoDetails;
			}
			set
			{
				if ((this._VideoDetails != value))
				{
					this.OnVideoDetailsChanging(value);
					this.SendPropertyChanging();
					this._VideoDetails = value;
					this.SendPropertyChanged("VideoDetails");
					this.OnVideoDetailsChanged();
				}
			}
		}
		
		[Column(Storage="_Subtitles", DbType="NVarChar(255)")]
		public string Subtitles
		{
			get
			{
				return this._Subtitles;
			}
			set
			{
				if ((this._Subtitles != value))
				{
					this.OnSubtitlesChanging(value);
					this.SendPropertyChanging();
					this._Subtitles = value;
					this.SendPropertyChanged("Subtitles");
					this.OnSubtitlesChanged();
				}
			}
		}
		
		[Column(Storage="_VideoResolution", DbType="NVarChar(20)")]
		public string VideoResolution
		{
			get
			{
				return this._VideoResolution;
			}
			set
			{
				if ((this._VideoResolution != value))
				{
					this.OnVideoResolutionChanging(value);
					this.SendPropertyChanging();
					this._VideoResolution = value;
					this.SendPropertyChanged("VideoResolution");
					this.OnVideoResolutionChanged();
				}
			}
		}
		
		[Column(Storage="_OriginalName", DbType="NVarChar(255)")]
		public string OriginalName
		{
			get
			{
				return this._OriginalName;
			}
			set
			{
				if ((this._OriginalName != value))
				{
					this.OnOriginalNameChanging(value);
					this.SendPropertyChanging();
					this._OriginalName = value;
					this.SendPropertyChanged("OriginalName");
					this.OnOriginalNameChanged();
				}
			}
		}
		
		[Column(Storage="_ImporterSource", DbType="NVarChar(255)")]
		public string ImporterSource
		{
			get
			{
				return this._ImporterSource;
			}
			set
			{
				if ((this._ImporterSource != value))
				{
					this.OnImporterSourceChanging(value);
					this.SendPropertyChanging();
					this._ImporterSource = value;
					this.SendPropertyChanged("ImporterSource");
					this.OnImporterSourceChanged();
				}
			}
		}
		
		[Association(Name="Title_Genre", Storage="_Genres", ThisKey="Id", OtherKey="TitleId")]
		public EntitySet<Genre> Genres
		{
			get
			{
				return this._Genres;
			}
			set
			{
				this._Genres.Assign(value);
			}
		}
		
		[Association(Name="Title_Person", Storage="_Peoples", ThisKey="Id", OtherKey="TitleId")]
		public EntitySet<Person> People
		{
			get
			{
				return this._Peoples;
			}
			set
			{
				this._Peoples.Assign(value);
			}
		}
		
		[Association(Name="Title_Tag", Storage="_Tags", ThisKey="Id", OtherKey="MovieId")]
		public EntitySet<Tag> Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				this._Tags.Assign(value);
			}
		}
		
		[Association(Name="Title_Disk", Storage="_Disks", ThisKey="Id", OtherKey="TitleId")]
		public EntitySet<Disk> Disks
		{
			get
			{
				return this._Disks;
			}
			set
			{
				this._Disks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Genres(Genre entity)
		{
			this.SendPropertyChanging();
			entity.Title = this;
		}
		
		private void detach_Genres(Genre entity)
		{
			this.SendPropertyChanging();
			entity.Title = null;
		}
		
		private void attach_Peoples(Person entity)
		{
			this.SendPropertyChanging();
			entity.Title = this;
		}
		
		private void detach_Peoples(Person entity)
		{
			this.SendPropertyChanging();
			entity.Title = null;
		}
		
		private void attach_Tags(Tag entity)
		{
			this.SendPropertyChanging();
			entity.Title = this;
		}
		
		private void detach_Tags(Tag entity)
		{
			this.SendPropertyChanging();
			entity.Title = null;
		}
		
		private void attach_Disks(Disk entity)
		{
			this.SendPropertyChanging();
			entity.Title = this;
		}
		
		private void detach_Disks(Disk entity)
		{
			this.SendPropertyChanging();
			entity.Title = null;
		}
	}
	
	[Table(Name="dbo.People")]
	internal partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CharacterName;
		
		private int _TitleId;
		
		private short _Sort;
		
		private byte _Role;
		
		private long _BioId;
		
		private long _Id;
		
		private EntityRef<BioData> _BioData;
		
		private EntityRef<Title> _Title;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCharacterNameChanging(string value);
    partial void OnCharacterNameChanged();
    partial void OnTitleIdChanging(int value);
    partial void OnTitleIdChanged();
    partial void OnSortChanging(short value);
    partial void OnSortChanged();
    partial void OnRoleChanging(byte value);
    partial void OnRoleChanged();
    partial void OnBioIdChanging(long value);
    partial void OnBioIdChanged();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    #endregion
		
		public Person()
		{
			this._BioData = default(EntityRef<BioData>);
			this._Title = default(EntityRef<Title>);
			OnCreated();
		}
		
		[Column(Storage="_CharacterName", DbType="NVarChar(255)")]
		public string CharacterName
		{
			get
			{
				return this._CharacterName;
			}
			set
			{
				if ((this._CharacterName != value))
				{
					this.OnCharacterNameChanging(value);
					this.SendPropertyChanging();
					this._CharacterName = value;
					this.SendPropertyChanged("CharacterName");
					this.OnCharacterNameChanged();
				}
			}
		}
		
		[Column(Storage="_TitleId", DbType="Int NOT NULL")]
		public int TitleId
		{
			get
			{
				return this._TitleId;
			}
			set
			{
				if ((this._TitleId != value))
				{
					if (this._Title.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTitleIdChanging(value);
					this.SendPropertyChanging();
					this._TitleId = value;
					this.SendPropertyChanged("TitleId");
					this.OnTitleIdChanged();
				}
			}
		}
		
		[Column(Storage="_Sort", DbType="SmallInt NOT NULL")]
		public short Sort
		{
			get
			{
				return this._Sort;
			}
			set
			{
				if ((this._Sort != value))
				{
					this.OnSortChanging(value);
					this.SendPropertyChanging();
					this._Sort = value;
					this.SendPropertyChanged("Sort");
					this.OnSortChanged();
				}
			}
		}
		
		[Column(Storage="_Role", DbType="TinyInt")]
		public byte Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[Column(Storage="_BioId", DbType="BigInt NOT NULL")]
		public long BioId
		{
			get
			{
				return this._BioId;
			}
			set
			{
				if ((this._BioId != value))
				{
					if (this._BioData.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBioIdChanging(value);
					this.SendPropertyChanging();
					this._BioId = value;
					this.SendPropertyChanged("BioId");
					this.OnBioIdChanged();
				}
			}
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Association(Name="BioData_Person", Storage="_BioData", ThisKey="BioId", OtherKey="Id", IsForeignKey=true)]
		public BioData MetaData
		{
			get
			{
				return this._BioData.Entity;
			}
			set
			{
				if ((this._BioData.Entity != value))
				{
					this.SendPropertyChanging();
					this._BioData.Entity = value;
					this.SendPropertyChanged("MetaData");
				}
			}
		}
		
		[Association(Name="Title_Person", Storage="_Title", ThisKey="TitleId", OtherKey="Id", IsForeignKey=true)]
		public Title Title
		{
			get
			{
				return this._Title.Entity;
			}
			set
			{
				Title previousValue = this._Title.Entity;
				if (((previousValue != value) 
							|| (this._Title.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Title.Entity = null;
						previousValue.People.Remove(this);
					}
					this._Title.Entity = value;
					if ((value != null))
					{
						value.People.Add(this);
						this._TitleId = value.Id;
					}
					else
					{
						this._TitleId = default(int);
					}
					this.SendPropertyChanged("Title");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BioData")]
	internal partial class BioData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FullName;
		
		private System.Data.Linq.Binary _Photo;
		
		private long _Id;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnPhotoChanging(System.Data.Linq.Binary value);
    partial void OnPhotoChanged();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    #endregion
		
		public BioData()
		{
			OnCreated();
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[Column(Storage="_Photo", DbType="Image", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_DateOfBirth", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Tags")]
	internal partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MovieId;
		
		private string _Name;
		
		private long _Id;
		
		private EntityRef<Title> _Title;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMovieIdChanging(int value);
    partial void OnMovieIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    #endregion
		
		public Tag()
		{
			this._Title = default(EntityRef<Title>);
			OnCreated();
		}
		
		[Column(Storage="_MovieId", DbType="Int NOT NULL")]
		public int MovieId
		{
			get
			{
				return this._MovieId;
			}
			set
			{
				if ((this._MovieId != value))
				{
					if (this._Title.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIdChanging(value);
					this.SendPropertyChanging();
					this._MovieId = value;
					this.SendPropertyChanged("MovieId");
					this.OnMovieIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Association(Name="Title_Tag", Storage="_Title", ThisKey="MovieId", OtherKey="Id", IsForeignKey=true)]
		public Title Title
		{
			get
			{
				return this._Title.Entity;
			}
			set
			{
				Title previousValue = this._Title.Entity;
				if (((previousValue != value) 
							|| (this._Title.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Title.Entity = null;
						previousValue.Tags.Remove(this);
					}
					this._Title.Entity = value;
					if ((value != null))
					{
						value.Tags.Add(this);
						this._MovieId = value.Id;
					}
					else
					{
						this._MovieId = default(int);
					}
					this.SendPropertyChanged("Title");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Disks")]
	internal partial class Disk : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _Path;
		
		private byte _VideoFormat;
		
		private long _Id;
		
		private int _TitleId;
		
		private EntityRef<Title> _Title;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnVideoFormatChanging(byte value);
    partial void OnVideoFormatChanged();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnTitleIdChanging(int value);
    partial void OnTitleIdChanged();
    #endregion
		
		public Disk()
		{
			this._Title = default(EntityRef<Title>);
			OnCreated();
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Path", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[Column(Storage="_VideoFormat", DbType="TinyInt NOT NULL")]
		public byte VideoFormat
		{
			get
			{
				return this._VideoFormat;
			}
			set
			{
				if ((this._VideoFormat != value))
				{
					this.OnVideoFormatChanging(value);
					this.SendPropertyChanging();
					this._VideoFormat = value;
					this.SendPropertyChanged("VideoFormat");
					this.OnVideoFormatChanged();
				}
			}
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_TitleId", DbType="Int NOT NULL")]
		public int TitleId
		{
			get
			{
				return this._TitleId;
			}
			set
			{
				if ((this._TitleId != value))
				{
					if (this._Title.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTitleIdChanging(value);
					this.SendPropertyChanging();
					this._TitleId = value;
					this.SendPropertyChanged("TitleId");
					this.OnTitleIdChanged();
				}
			}
		}
		
		[Association(Name="Title_Disk", Storage="_Title", ThisKey="TitleId", OtherKey="Id", IsForeignKey=true)]
		public Title Title
		{
			get
			{
				return this._Title.Entity;
			}
			set
			{
				Title previousValue = this._Title.Entity;
				if (((previousValue != value) 
							|| (this._Title.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Title.Entity = null;
						previousValue.Disks.Remove(this);
					}
					this._Title.Entity = value;
					if ((value != null))
					{
						value.Disks.Add(this);
						this._TitleId = value.Id;
					}
					else
					{
						this._TitleId = default(int);
					}
					this.SendPropertyChanged("Title");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
