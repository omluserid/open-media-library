<Mcml xmlns ="http://schemas.microsoft.com/2006/mcml" 
      xmlns:cor ="assembly://MsCorLib/System" 
      xmlns:coll="assembly://MsCorLib/System.Collections" 
      xmlns:shell="assembly://Microsoft.MediaCenter.Shell/Microsoft.MediaCenter.Shell" 
      xmlns:util="assembly://Microsoft.MediaCenter.UI/Microsoft.MediaCenter.UI.Utility" 
      xmlns:comm="res://Microsoft.MediaCenter.Shell!Globals.mcml" 
      xmlns:b ="res://Microsoft.MediaCenter.Shell!Button.mcml" 
      xmlns:me="Me">
  <UI Name="ListViewItem">
    <Properties>
      <ICommand Name="Model" ICommand="$Required"/>
      <ISelectionPolicy Name="SelectionPolicy" ISelectionPolicy="$Required"/>
      <Index Name="Index" Index="$Required"/>
      <PropertySet Name="ItemProperties" PropertySet="$Required"/>
      <IntRangedValue Name="SelectedGroup"/>
      <cor:Int32 Name="Group"/>
      <AnchorLayoutInput Name="LabelBackgroundLayoutInput" ContributesToWidth="false" ContributesToHeight="false" Left="Label, 0, -8" Top="Label, 0, -4" Right="Label, 1, 8" Bottom="Label, 1, 4"/>
      <DockLayoutInput Name="LeftContentLayoutInput" Position="Left" Alignment="Center"/>
      <DockLayoutInput Name="LabelContentLayoutInput" Position="Left" Alignment="Center"/>
      <DockLayoutInput Name="RightContentLayoutInput" Position="Left" Alignment="Center"/>
      <cor:String Name="FocusStyle" String="Text"/>
      <Size Name="TileSize" Size="512, 59"/>
      <Color Name="NoFocusColor" Color="color://comm:LightBlue"/>
      <Color Name="FocusColor" Color="color://comm:OffWhite"/>
      <Color Name="DisabledColor" Color="color://comm:LightBlue40Percent"/>
      <Inset Name="TilePadding" Inset="0, 0, 0, 0"/>
      <Inset Name="TileMargins" Inset="0, 0, 0, 0"/>
      <Inset Name="LabelMargins" Inset="0, 0, 0, 0"/>
      <Inset Name="FocusLabelMargins" Inset="-18, 0, 18, 0"/>
      <Size Name="LabelSize" Size="420, 0"/>
      <Size Name="FocusLabelSize" Size="420, 0"/>
      <cor:Single Name="NoFocusAlpha" Single="0.6"/>
      <cor:Single Name="FocusAlpha" Single="1.0"/>
      <Vector3 Name="NoFocusScale" Vector3="1.0, 1.0, 1.0"/>
      <Vector3 Name="FocusScale" Vector3="1.16, 1.16, 1.0"/>
      <Font Name="LabelFont" FontName="global://comm:MainFontFace" FontSize="24"/>
      <cor:Boolean Name="AllowSelectAnimation" Boolean="false"/>
      <cor:Boolean Name="UseFullBackground" Boolean="false"/>
      <Image Name="LabelBackground" Image="null"/>
      <Image Name="LabelBackgroundFocus" Image="null"/>
      <Image Name="FullBackground" Image="null"/>
      <Image Name="FullBackgroundFocus" Image="null"/>
      <cor:String Name="LeftContentTemplate" String="null"/>
      <cor:String Name="RightContentTemplate" String="null"/>
      <shell:ImageSet Name="LabelBackgroundImageSet" ImageSet="global://comm:Button.Label.Background"/>
      <AccessibleRole Name="AccessibilityRole" AccessibleRole="ListItem"/>
    </Properties>
    <Locals>
      <Environment Name="Environment"/>
      <IntRangedValue Name="SelectedIndex" IntRangedValue="[ItemProperties.#SelectedIndex!IntRangedValue]"/>
      <IntRangedValue Name="TotalCount" IntRangedValue="[ItemProperties.#TotalCount!IntRangedValue]"/>
      <EditableText Name="TransitionState" EditableText="[ItemProperties.#TransitionState!EditableText]"/>
      <EditableText Name="ItemMode" EditableText="[ItemProperties.#ItemMode!EditableText]"/>
      <EditableText Name="KeyAxis" EditableText="[ItemProperties.#KeyAxis!EditableText]"/>
      <EditableText Name="FocusArea" EditableText="[ItemProperties.#FocusArea!EditableText]"/>
      <ClickHandler Name="Clicker"/>
      <AreaOfInterestLayoutInput Name="AreaOfInterest" Id="InitialFocus"/>
      <KeyHandler Name="LeftKey" Key="Left" HandlerStage="Routed"/>
      <KeyHandler Name="RightKey" Key="Right" HandlerStage="Routed"/>
      <KeyHandler Name="UpKey" Key="Up" HandlerStage="Routed"/>
      <KeyHandler Name="DownKey" Key="Down" HandlerStage="Routed"/>
      <cor:Boolean Name="IsFocused" Boolean="false"/>
      <cor:String Name="FocusAnimationSpeed" String="slow"/>
      <cor:Int32 Name="WrappedIndex"/>
      <util:WrappedIndexTransformer Name="IndexTransformer"/>
      <cor:Int32 Name="OffsetIndex" Int32="0"/>
      <MathTransformer Name="OffsetCalc" Absolute="true"/>
      <Command Name="Selected"/>
      <Command Name="Trigger"/>
      <Command Name="Reset"/>
      <EditableText Name="LocalMode" Value="None"/>
      <cor:Object Name="InvokeReturned"/>
      <TransformAnimation Name="TransitionToForward" Source="animation://comm:ListViewItem.NavigateToForward"/>
      <TransformAnimation Name="TransitionToBackward" Source="animation://comm:ListViewItem.NavigateToBackward"/>
      <TransformAnimation Name="TransitionAwayForward" Source="animation://comm:ListViewItem.NavigateAwayForward"/>
      <TransformAnimation Name="TransitionAwayBackward" Source="animation://comm:ListViewItem.NavigateAwayBackward"/>
      <shell:ContextualUIDescription Name="ContextualUIDescription" Source="@res://Microsoft.MediaCenter.Shell!ContextMenu.mcml#ListViewItem.ContextualView"/>
    </Locals>
    <Rules>
      <Binding Target="[IndexTransformer.Count]" Source="[TotalCount.Value]"/>
      <Binding Target="[WrappedIndex]" Source="[Index.Value]" Transformer="[IndexTransformer]"/>
      <Condition Source="[Input.KeyFocus]" SourceValue="true" Target="[SelectedIndex.Value]" Value="[Index.Value]"/>
      <Changed Source="[SelectedIndex.Value]" InitialEvaluate="true">
        <Actions>
          <Set Target="[OffsetCalc.SubtractInt]" Value="[SelectedIndex.Value]"/>
          <Set Target="[OffsetIndex]" Value="[Index.Value]" Transformer="[OffsetCalc]"/>
        </Actions>
      </Changed>
      <Rule ConditionLogicalOp="Or">
        <Conditions>
          <Equality Source="[TransitionState.Value]" Value="NavigatingToForward"/>
          <Equality Source="[TransitionState.Value]" Value="NavigatingToBackward"/>
        </Conditions>
        <Actions>
          <Set Target="[LocalMode.Value]" Value="None" ExclusiveApply="false"/>
          <Set Target="[LabelPanel.Scale]" Value="[NoFocusScale]" ExclusiveApply="false"/>
        </Actions>
      </Rule>
      <Rule ConditionLogicalOp="Or">
        <Conditions>
          <Equality Source="[Input.KeyFocus]" Value="true"/>
        </Conditions>
        <Actions>
          <Set Target="[IsFocused]" Value="true"/>
        </Actions>
      </Rule>
      <Rule ConditionLogicalOp="Or">
        <Conditions>
          <Equality Source="[LocalMode.Value]" Value="Select"/>
        </Conditions>
        <Actions>
          <Set Target="[IsFocused]" Value="true"/>
        </Actions>
      </Rule>
      <Default Target="[IsFocused]" Value="false"/>
      <Condition Source="[TransitionState.Value]" SourceValue="NavigatingToForward">
        <Actions>
          <Set Target="[TransitionToForward.Delay]" Value="[OffsetIndex]">
            <Transformer>
              <MathTransformer Multiply="0.02" Absolute="true" Type="Single"/>
            </Transformer>
          </Set>
          <Invoke Target="[Root.AttachAnimation]" animation="[TransitionToForward]" InvokePolicy="Synchronous"/>
          <Invoke Target="[MousePanel.DetachAnimation]" type="Hide" InvokePolicy="Synchronous"/>
          <Invoke Target="[LabelPanel.DetachAnimation]" type="Hide" InvokePolicy="Synchronous"/>
        </Actions>
      </Condition>
      <Condition Source="[TransitionState.Value]" SourceValue="NavigatingToBackward">
        <Actions>
          <Set Target="[TransitionToBackward.Delay]" Value="[OffsetIndex]">
            <Transformer>
              <MathTransformer Multiply="0.01" Absolute="true" Type="Single"/>
            </Transformer>
          </Set>
          <Invoke Target="[Root.AttachAnimation]" animation="[TransitionToBackward]" InvokePolicy="Synchronous"/>
          <Invoke Target="[MousePanel.DetachAnimation]" type="Hide" InvokePolicy="Synchronous"/>
          <Invoke Target="[LabelPanel.DetachAnimation]" type="Hide" InvokePolicy="Synchronous"/>
        </Actions>
      </Condition>
      <Rule>
        <Conditions>
          <Equality Source="[TransitionState.Value]" Value="NavigatingAwayForward"/>
          <Equality Source="[IsFocused]" Value="false"/>
        </Conditions>
        <Actions>
          <Set Target="[TransitionAwayForward.Delay]" Value="[OffsetIndex]">
            <Transformer>
              <MathTransformer Multiply="0.01" Absolute="true" Type="Single"/>
            </Transformer>
          </Set>
          <Invoke Target="[Root.AttachAnimation]" animation="[TransitionAwayForward]" InvokePolicy="Synchronous"/>
          <Invoke Target="[MousePanel.DetachAnimation]" type="Hide" InvokePolicy="Synchronous"/>
          <Invoke Target="[LabelPanel.DetachAnimation]" type="Hide" InvokePolicy="Synchronous"/>
        </Actions>
      </Rule>
      <Condition Source="[TransitionState.Value]" SourceValue="NavigatingAwayBackward">
        <Actions>
          <Set Target="[TransitionAwayBackward.Delay]" Value="[OffsetIndex]">
            <Transformer>
              <MathTransformer Multiply="0.01" Absolute="true" Type="Single"/>
            </Transformer>
          </Set>
          <Invoke Target="[Root.AttachAnimation]" animation="[TransitionAwayBackward]" InvokePolicy="Synchronous"/>
          <Invoke Target="[MousePanel.DetachAnimation]" type="Hide" InvokePolicy="Synchronous"/>
          <Invoke Target="[LabelPanel.DetachAnimation]" type="Hide" InvokePolicy="Synchronous"/>
        </Actions>
      </Condition>
      <Rule>
        <Conditions>
          <Equality Source="[Environment.Is2DAnimationExperience]" Value="true"/>
        </Conditions>
        <Actions>
          <Invoke Target="[Root.DetachAnimation]" type="Show" InvokePolicy="Synchronous" ExclusiveApply="false"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[Clicker.Clicking]" Value="true"/>
          <Equality Source="[Input.KeyFocus]" Value="true"/>
          <Equality Source="[AllowSelectAnimation]" Value="false"/>
        </Conditions>
        <Actions>
          <Set Target="[LocalMode.Value]" Value="Press" ExclusiveApply="false"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[Clicker.Clicking]" Value="false"/>
          <Equality Source="[LocalMode.Value]" Value="Press"/>
          <Equality Source="[AllowSelectAnimation]" Value="false"/>
        </Conditions>
        <Actions>
          <Set Target="[LocalMode.Value]" Value="Release" ExclusiveApply="false"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Modified Source="[Selected.Invoked]"/>
          <Equality Source="[AllowSelectAnimation]" Value="false"/>
        </Conditions>
        <Actions>
          <Set Target="[LocalMode.Value]" Value="Select" ExclusiveApply="false"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[LocalMode.Value]" Value="Press"/>
          <Equality Source="[FocusStyle]" Value="Text"/>
          <Equality Source="[Environment.Is2DAnimationExperience]" Value="false"/>
        </Conditions>
        <Actions>
          <PlayAnimation Target="[MousePanel]" Animation="animation://comm:ListViewItem.Press" ExclusiveApply="false"/>
          <Set Target="[ItemMode.Value]" Value="[LocalMode.Value]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[LocalMode.Value]" Value="Press"/>
          <Equality Source="[FocusStyle]" Value="Text"/>
          <Equality Source="[Environment.Is2DAnimationExperience]" Value="true"/>
        </Conditions>
        <Actions>
          <PlayAnimation Target="[MousePanel]" Animation="animation://comm:ListViewItem.Press.GDI" ExclusiveApply="false"/>
          <Set Target="[ItemMode.Value]" Value="[LocalMode.Value]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[LocalMode.Value]" Value="Press"/>
          <Equality Source="[FocusStyle]" Value="Thumbnail"/>
          <Equality Source="[Environment.RenderingDeviceType]" ConditionOp="NotEquals" Value="Gdi"/>
        </Conditions>
        <Actions>
          <PlayAnimation Target="[LeftContentHost]" Animation="animation://comm:ListViewItem.Press"/>
          <Set Target="[ItemMode.Value]" Value="[LocalMode.Value]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[LocalMode.Value]" Value="Release"/>
          <Equality Source="[FocusStyle]" Value="Text"/>
          <Equality Source="[Environment.RenderingDeviceType]" ConditionOp="NotEquals" Value="Gdi"/>
        </Conditions>
        <Actions>
          <PlayAnimation Target="[MousePanel]" Animation="animation://comm:ListViewItem.Release" ExclusiveApply="false"/>
          <Set Target="[ItemMode.Value]" Value="[LocalMode.Value]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[LocalMode.Value]" Value="Release"/>
          <Equality Source="[FocusStyle]" Value="Thumbnail"/>
          <Equality Source="[Environment.RenderingDeviceType]" ConditionOp="NotEquals" Value="Gdi"/>
        </Conditions>
        <Actions>
          <PlayAnimation Target="[LeftContentHost]" Animation="animation://comm:ListViewItem.Release"/>
          <Set Target="[ItemMode.Value]" Value="[LocalMode.Value]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[LocalMode.Value]" Value="Select"/>
          <Equality Source="[FocusStyle]" Value="Text"/>
        </Conditions>
        <Actions>
          <PlayAnimation Target="[MousePanel]" Animation="animation://comm:ListViewItem.Release"/>
          <Invoke Target="[MousePanel.AttachAnimation]" animation="animation://comm:ListViewItem.Select" ExclusiveApply="false"/>
          <Set Target="[ItemMode.Value]" Value="[LocalMode.Value]"/>
          <Invoke Target="[Trigger.Invoke]" InvokePolicy="AsynchronousLowPri"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[LocalMode.Value]" Value="Select"/>
          <Equality Source="[FocusStyle]" Value="Thumbnail"/>
        </Conditions>
        <Actions>
          <PlayAnimation Target="[LeftContentHost]" Animation="animation://comm:ListViewItem.Release"/>
          <Invoke Target="[Root.AttachAnimation]" animation="animation://comm:ListViewItem.Select" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.DetachAnimation]" type="Hide" InvokePolicy="Synchronous"/>
          <Invoke Target="[Label.DetachAnimation]" type="ContentChangeShow" InvokePolicy="Synchronous"/>
          <Invoke Target="[Label.DetachAnimation]" type="ContentChangeHide" InvokePolicy="Synchronous"/>
          <Set Target="[ItemMode.Value]" Value="[LocalMode.Value]"/>
          <Invoke Target="[Trigger.Invoke]" InvokePolicy="AsynchronousLowPri"/>
        </Actions>
      </Rule>
      <Changed Source="[Trigger.Invoked]">
        <Actions>
          <Invoke Target="[Model!Command.Invoke]" ResultTarget="[InvokeReturned]" invokePolicy="Synchronous" InvokePolicy="Synchronous"/>
        </Actions>
      </Changed>
      <Rule>
        <Conditions>
          <Modified Source="[Selected.Invoked]"/>
          <Equality Source="[AllowSelectAnimation]" Value="true"/>
        </Conditions>
        <Actions>
          <PlayAnimation Target="[Root]" Animation="animation://comm:ListViewItem.Release"/>
          <Set Target="[ItemMode.Value]" Value="Release"/>
          <Invoke Target="[Model!ICommand.Invoke]"/>
        </Actions>
      </Rule>
      <Binding Target="[Accessible.IsPressed]" Source="[Clicker.Clicking]"/>
      <Binding Target="[Accessible.IsFocusable]" Source="[Input.KeyInteractive]"/>
      <Binding Target="[Accessible.IsFocused]" Source="[Input.KeyFocus]"/>
      <Binding Target="[Accessible.Name]" Source="[Model.Description]"/>
      <Default Target="[Accessible.DefaultActionCommand]" Value="[Model]"/>
      <Default Target="[Accessible.DefaultAction]" Value="res://ehres!Acc_DefaultAction_Button"/>
      <Default Target="[Accessible.Role]" Value="[AccessibilityRole]"/>
      <Default Target="[Clicker.Command]" Value="[Selected]"/>
      <Binding Target="[Input.Enabled]" Source="[Model.Available]"/>
      <Condition Source="[Input.Enabled]" SourceValue="false" Target="[Label.Color]" Value="[DisabledColor]"/>
      <Condition Source="[IsFocused]" SourceValue="true">
        <Actions>
          <Set Target="[Root.Parent.Layer]" Value="0" ExclusiveApply="false"/>
          <Set Target="[Root.Parent.Layer]" Value="1"/>
        </Actions>
      </Condition>
      <Condition Source="[IsFocused]" SourceValue="false">
        <Actions>
          <Set Target="[Root.Parent.Layer]" Value="1" ExclusiveApply="false"/>
          <Set Target="[Root.Parent.Layer]" Value="0"/>
        </Actions>
      </Condition>
      <Rule>
        <Conditions>
          <Modified Source="[Clicker.Invoked]"/>
        </Conditions>
        <Actions>
          <PlaySound Sound="res://ehres!Select_a.wav"/>
        </Actions>
      </Rule>
      <Condition Source="[RightContentTemplate]" ConditionOp="NotEquals" SourceValue="null">
        <Actions>
          <Set Target="[RightContentHost.Visible]" Value="true"/>
          <Set Target="[RightContentHost.Source]" Value="[RightContentTemplate]"/>
        </Actions>
      </Condition>
      <Condition Source="[LeftContentTemplate]" ConditionOp="NotEquals" SourceValue="null">
        <Actions>
          <Set Target="[LeftContentHost.Visible]" Value="true"/>
          <Set Target="[LeftContentHost.Source]" Value="[LeftContentTemplate]"/>
        </Actions>
      </Condition>
      <Rule>
        <Conditions>
          <IsValid Source="[SelectionPolicy]"/>
        </Conditions>
        <Actions>
          <Set Target="[Model!ISelectable.SelectionPolicy]" Value="[SelectionPolicy]"/>
          <Set Target="[Input.FocusModel]" Value="[Model!ISelectable]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[IsFocused]" Value="true"/>
          <Equality Source="[TransitionState.Value]" ConditionOp="NotEquals" Value="NavigatingToForward"/>
        </Conditions>
        <Actions>
          <Set Target="[LeftContentHost.ParentKeyFocus]" Value="true"/>
          <Set Target="[RightContentHost.ParentKeyFocus]" Value="true"/>
        </Actions>
      </Rule>
      <Default Target="[RightContentHost.ParentKeyFocus]" Value="false"/>
      <Default Target="[LeftContentHost.ParentKeyFocus]" Value="false"/>
      <Rule>
        <Conditions>
          <Equality Source="[IsFocused]" Value="true"/>
          <Equality Source="[TransitionState.Value]" ConditionOp="NotEquals" Value="NavigatingToForward"/>
          <Equality Source="[UseFullBackground]" Value="true"/>
        </Conditions>
        <Actions>
          <Set Target="[FullBackgroundGraphic.Image]" Value="[FullBackgroundFocus]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[IsFocused]" Value="true"/>
          <Equality Source="[TransitionState.Value]" ConditionOp="NotEquals" Value="NavigatingToForward"/>
          <Equality Source="[UseFullBackground]" Value="false"/>
        </Conditions>
        <Actions>
          <Set Target="[LabelBackgroundGraphic.Image]" Value="[LabelBackgroundFocus]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[Input.KeyFocus]" Value="true"/>
          <IsValid Source="[SelectionPolicy]"/>
        </Conditions>
        <Actions>
          <Set Target="[SelectionPolicy.SelectionIndex]" Value="[Index.Value]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[Input.KeyFocus]" Value="true"/>
          <Equality Source="[TransitionState.Value]" ConditionOp="NotEquals" Value="NavigatingToForward"/>
        </Conditions>
        <Actions>
          <PlaySound Sound="res://ehres!Focus_a.wav"/>
        </Actions>
      </Rule>
      <Condition Source="[FocusArea.Value]" ConditionOp="ChangedTo" SourceValue="Gallery" Target="[FocusAnimationSpeed]" Value="fast"/>
      <Condition Source="[TransitionState.Value]" SourceValue="NavigatingToBackward" Target="[FocusAnimationSpeed]" Value="instant"/>
      <Condition Source="[Environment.IsMouseActive]" SourceValue="true" Target="[FocusAnimationSpeed]" Value="mouse"/>
      <Rule ConditionLogicalOp="Or">
        <Conditions>
          <Modified Source="[LeftKey.Invoked]"/>
          <Modified Source="[RightKey.Invoked]"/>
        </Conditions>
        <Actions>
          <Set Target="[KeyAxis.Value]" Value="none" ExclusiveApply="false"/>
          <Set Target="[KeyAxis.Value]" Value="Horizontal" ExclusiveApply="false"/>
          <Set Target="[FocusAnimationSpeed]" Value="slow"/>
        </Actions>
      </Rule>
      <Rule ConditionLogicalOp="Or">
        <Conditions>
          <Modified Source="[UpKey.Invoked]"/>
          <Modified Source="[DownKey.Invoked]"/>
        </Conditions>
        <Actions>
          <Set Target="[KeyAxis.Value]" Value="none" ExclusiveApply="false"/>
          <Set Target="[KeyAxis.Value]" Value="Vertical" ExclusiveApply="false"/>
          <Set Target="[FocusAnimationSpeed]" Value="fast"/>
        </Actions>
      </Rule>
      <Condition Source="[Environment.Is2DAnimationExperience]" SourceValue="true" Target="[FocusAnimationSpeed]" Value="fast"/>
      <Condition Source="[KeyAxis.Value]" SourceValue="Horizontal" Target="[FocusAnimationSpeed]" Value="slow"/>
      <Condition Source="[KeyAxis.Value]" SourceValue="Vertical" Target="[FocusAnimationSpeed]" Value="fast"/>
      <Binding Target="[LeftContentHost.FocusAnimationSpeed]" Source="[FocusAnimationSpeed]"/>
      <Binding Target="[RightContentHost.FocusAnimationSpeed]" Source="[FocusAnimationSpeed]"/>
      <Rule>
        <Conditions>
          <Equality Source="[IsFocused]" Value="true"/>
          <Equality Source="[TransitionState.Value]" ConditionOp="NotEquals" Value="NavigatingToForward"/>
          <Equality Source="[FocusStyle]" Value="Thumbnail"/>
          <Equality Source="[FocusAnimationSpeed]" Value="instant"/>
        </Conditions>
        <Actions>
          <Invoke Target="[Root.DetachAnimation]" type="Alpha" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.DetachAnimation]" type="Move" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.DetachAnimation]" type="Size" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.DetachAnimation]" type="Scale" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.DetachAnimation]" type="Move" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.DetachAnimation]" type="Size" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.DetachAnimation]" type="Scale" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Set Target="[Root.Alpha]" Value="[NoFocusAlpha]" ExclusiveApply="false"/>
          <Set Target="[Root.Alpha]" Value="[FocusAlpha]"/>
          <Set Target="[Label.Color]" Value="[FocusColor]"/>
          <Set Target="[MousePanel.MaximumSize]" Value="[FocusLabelSize]"/>
          <Set Target="[MousePanel.Margins]" Value="[FocusLabelMargins]"/>
          <Set Target="[MousePanel.Scale]" Value="[FocusScale]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[IsFocused]" Value="true"/>
          <Equality Source="[TransitionState.Value]" ConditionOp="NotEquals" Value="NavigatingToForward"/>
          <Equality Source="[FocusStyle]" Value="Thumbnail"/>
          <Equality Source="[FocusAnimationSpeed]" Value="slow"/>
        </Conditions>
        <Actions>
          <Invoke Target="[Root.DetachAnimation]" type="Alpha" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.DetachAnimation]" type="Move" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.DetachAnimation]" type="Size" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.DetachAnimation]" type="Scale" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.DetachAnimation]" type="Move" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.DetachAnimation]" type="Size" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.DetachAnimation]" type="Scale" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[Root.AttachAnimation]" animation="animation://comm:ListViewItem.Alpha.GainFocus.Slow" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[Root.AttachAnimation]" animation="animation://comm:ListViewItem.Alpha.GainFocus.Slow" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.AttachAnimation]" animation="animation://comm:ListViewItem.Move.GainFocus.Slow" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.AttachAnimation]" animation="animation://comm:ListViewItem.Size.GainFocus.Slow" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.AttachAnimation]" animation="animation://comm:ListViewItem.Text.Scale.GainFocus.Slow" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.AttachAnimation]" animation="animation://comm:ListViewItem.Move.GainFocus.Slow" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.AttachAnimation]" animation="animation://comm:ListViewItem.Size.GainFocus.Slow" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.AttachAnimation]" animation="animation://comm:ListViewItem.Text.Scale.GainFocus.Slow" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Set Target="[Root.Alpha]" Value="[NoFocusAlpha]" ExclusiveApply="false"/>
          <Set Target="[Root.Alpha]" Value="[FocusAlpha]"/>
          <Set Target="[Label.Color]" Value="[FocusColor]"/>
          <Set Target="[MousePanel.MaximumSize]" Value="[FocusLabelSize]"/>
          <Set Target="[MousePanel.Margins]" Value="[FocusLabelMargins]"/>
          <Set Target="[MousePanel.Scale]" Value="[FocusScale]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[IsFocused]" Value="true"/>
          <Equality Source="[TransitionState.Value]" ConditionOp="NotEquals" Value="NavigatingToForward"/>
          <Equality Source="[FocusStyle]" Value="Thumbnail"/>
          <Equality Source="[FocusAnimationSpeed]" Value="fast"/>
          <Equality Source="[Environment.Is2DAnimationExperience]" Value="false"/>
        </Conditions>
        <Actions>
          <Invoke Target="[Root.DetachAnimation]" type="Alpha" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.DetachAnimation]" type="Move" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.DetachAnimation]" type="Size" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.DetachAnimation]" type="Scale" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.DetachAnimation]" type="Move" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.DetachAnimation]" type="Size" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.DetachAnimation]" type="Scale" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[Root.AttachAnimation]" animation="animation://comm:ListViewItem.Alpha.GainFocus.Fast" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[Root.AttachAnimation]" animation="animation://comm:ListViewItem.Alpha.GainFocus.Fast" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.AttachAnimation]" animation="animation://comm:ListViewItem.Move.GainFocus.Fast" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.AttachAnimation]" animation="animation://comm:ListViewItem.Size.GainFocus.Fast" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.AttachAnimation]" animation="animation://comm:ListViewItem.Text.Scale.GainFocus.Fast" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.AttachAnimation]" animation="animation://comm:ListViewItem.Move.GainFocus.Fast" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.AttachAnimation]" animation="animation://comm:ListViewItem.Size.GainFocus.Fast" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.AttachAnimation]" animation="animation://comm:ListViewItem.Text.Scale.GainFocus.Fast" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Set Target="[Root.Alpha]" Value="[NoFocusAlpha]" ExclusiveApply="false"/>
          <Set Target="[Root.Alpha]" Value="[FocusAlpha]"/>
          <Set Target="[Label.Color]" Value="[FocusColor]"/>
          <Set Target="[MousePanel.MaximumSize]" Value="[FocusLabelSize]"/>
          <Set Target="[MousePanel.Margins]" Value="[FocusLabelMargins]"/>
          <Set Target="[MousePanel.Scale]" Value="[FocusScale]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[IsFocused]" Value="true"/>
          <Equality Source="[TransitionState.Value]" ConditionOp="NotEquals" Value="NavigatingToForward"/>
          <Equality Source="[FocusStyle]" Value="Thumbnail"/>
          <Equality Source="[FocusAnimationSpeed]" Value="fast"/>
          <Equality Source="[Environment.Is2DAnimationExperience]" Value="true"/>
        </Conditions>
        <Actions>
          <Invoke Target="[Root.DetachAnimation]" type="Alpha" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.DetachAnimation]" type="Move" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.DetachAnimation]" type="Size" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.DetachAnimation]" type="Scale" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.DetachAnimation]" type="Move" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.DetachAnimation]" type="Size" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.DetachAnimation]" type="Scale" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[Root.AttachAnimation]" animation="animation://comm:ListViewItem.Alpha.GainFocus.Fast.GDI" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[Root.AttachAnimation]" animation="animation://comm:ListViewItem.Alpha.GainFocus.Fast.GDI" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.AttachAnimation]" animation="animation://comm:ListViewItem.Move.GainFocus.Fast.GDI" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.AttachAnimation]" animation="animation://comm:ListViewItem.Size.GainFocus.Fast.GDI" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.AttachAnimation]" animation="animation://comm:ListViewItem.Text.Scale.GainFocus.Fast.GDI" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.AttachAnimation]" animation="animation://comm:ListViewItem.Move.GainFocus.Fast.GDI" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.AttachAnimation]" animation="animation://comm:ListViewItem.Size.GainFocus.Fast.GDI" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.AttachAnimation]" animation="animation://comm:ListViewItem.Text.Scale.GainFocus.Fast.GDI" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Set Target="[Root.Alpha]" Value="[NoFocusAlpha]" ExclusiveApply="false"/>
          <Set Target="[Root.Alpha]" Value="[FocusAlpha]"/>
          <Set Target="[Label.Color]" Value="[FocusColor]"/>
          <Set Target="[MousePanel.MaximumSize]" Value="[FocusLabelSize]"/>
          <Set Target="[MousePanel.Margins]" Value="[FocusLabelMargins]"/>
          <Set Target="[MousePanel.Scale]" Value="[FocusScale]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[IsFocused]" Value="true"/>
          <Equality Source="[TransitionState.Value]" ConditionOp="NotEquals" Value="NavigatingToForward"/>
          <Equality Source="[FocusStyle]" Value="Thumbnail"/>
          <Equality Source="[FocusAnimationSpeed]" Value="mouse"/>
        </Conditions>
        <Actions>
          <Invoke Target="[Root.DetachAnimation]" type="Alpha" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.DetachAnimation]" type="Move" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.DetachAnimation]" type="Size" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.DetachAnimation]" type="Scale" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.DetachAnimation]" type="Move" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.DetachAnimation]" type="Size" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.DetachAnimation]" type="Scale" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[Root.AttachAnimation]" animation="animation://comm:ListViewItem.Alpha.GainFocus.Mouse" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[Root.AttachAnimation]" animation="animation://comm:ListViewItem.Alpha.GainFocus.Mouse" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.AttachAnimation]" animation="animation://comm:ListViewItem.Move.GainFocus.Mouse" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.AttachAnimation]" animation="animation://comm:ListViewItem.Size.GainFocus.Mouse" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.AttachAnimation]" animation="animation://comm:ListViewItem.Text.Scale.GainFocus.Mouse" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.AttachAnimation]" animation="animation://comm:ListViewItem.Move.GainFocus.Mouse" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.AttachAnimation]" animation="animation://comm:ListViewItem.Size.GainFocus.Mouse" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.AttachAnimation]" animation="animation://comm:ListViewItem.Text.Scale.GainFocus.Mouse" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Set Target="[Root.Alpha]" Value="[NoFocusAlpha]" ExclusiveApply="false"/>
          <Set Target="[Root.Alpha]" Value="[FocusAlpha]"/>
          <Set Target="[Label.Color]" Value="[FocusColor]"/>
          <Set Target="[MousePanel.MaximumSize]" Value="[FocusLabelSize]"/>
          <Set Target="[MousePanel.Margins]" Value="[FocusLabelMargins]"/>
          <Set Target="[MousePanel.Scale]" Value="[FocusScale]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[IsFocused]" Value="true"/>
          <Equality Source="[TransitionState.Value]" ConditionOp="NotEquals" Value="NavigatingToForward"/>
          <Equality Source="[FocusStyle]" Value="Text"/>
          <Equality Source="[FocusAnimationSpeed]" Value="instant"/>
        </Conditions>
        <Actions>
          <Invoke Target="[Root.DetachAnimation]" type="Alpha" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.DetachAnimation]" type="Move" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.DetachAnimation]" type="Size" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.DetachAnimation]" type="Scale" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Set Target="[Root.Alpha]" Value="[NoFocusAlpha]" ExclusiveApply="false"/>
          <Set Target="[Root.Alpha]" Value="[FocusAlpha]"/>
          <Set Target="[Label.Color]" Value="[FocusColor]"/>
          <Set Target="[LabelPanel.MaximumSize]" Value="[FocusLabelSize]"/>
          <Set Target="[LabelPanel.Margins]" Value="[FocusLabelMargins]"/>
          <Set Target="[LabelPanel.Scale]" Value="[FocusScale]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[IsFocused]" Value="true"/>
          <Equality Source="[TransitionState.Value]" ConditionOp="NotEquals" Value="NavigatingToForward"/>
          <Equality Source="[FocusStyle]" Value="Text"/>
          <Equality Source="[FocusAnimationSpeed]" Value="slow"/>
        </Conditions>
        <Actions>
          <Invoke Target="[Root.DetachAnimation]" type="Alpha" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.DetachAnimation]" type="Move" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.DetachAnimation]" type="Size" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.DetachAnimation]" type="Scale" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[Root.AttachAnimation]" animation="animation://comm:ListViewItem.Alpha.GainFocus.Slow" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[Root.AttachAnimation]" animation="animation://comm:ListViewItem.Alpha.GainFocus.Slow" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.AttachAnimation]" animation="animation://comm:ListViewItem.Move.GainFocus.Slow" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.AttachAnimation]" animation="animation://comm:ListViewItem.Size.GainFocus.Slow" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.AttachAnimation]" animation="animation://comm:ListViewItem.Text.Scale.GainFocus.Slow" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Set Target="[Root.Alpha]" Value="[NoFocusAlpha]" ExclusiveApply="false"/>
          <Set Target="[Root.Alpha]" Value="[FocusAlpha]"/>
          <Set Target="[Label.Color]" Value="[FocusColor]"/>
          <Set Target="[LabelPanel.MaximumSize]" Value="[FocusLabelSize]"/>
          <Set Target="[LabelPanel.Margins]" Value="[FocusLabelMargins]"/>
          <Set Target="[LabelPanel.Scale]" Value="[FocusScale]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[IsFocused]" Value="true"/>
          <Equality Source="[TransitionState.Value]" ConditionOp="NotEquals" Value="NavigatingToForward"/>
          <Equality Source="[FocusStyle]" Value="Text"/>
          <Equality Source="[FocusAnimationSpeed]" Value="fast"/>
          <Equality Source="[Environment.Is2DAnimationExperience]" Value="false"/>
        </Conditions>
        <Actions>
          <Invoke Target="[Root.DetachAnimation]" type="Alpha" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.DetachAnimation]" type="Move" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.DetachAnimation]" type="Size" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.DetachAnimation]" type="Scale" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[Root.AttachAnimation]" animation="animation://comm:ListViewItem.Alpha.GainFocus.Fast" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[Root.AttachAnimation]" animation="animation://comm:ListViewItem.Alpha.GainFocus.Fast" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.AttachAnimation]" animation="animation://comm:ListViewItem.Move.GainFocus.Fast" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.AttachAnimation]" animation="animation://comm:ListViewItem.Size.GainFocus.Fast" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.AttachAnimation]" animation="animation://comm:ListViewItem.Text.Scale.GainFocus.Fast" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Set Target="[Root.Alpha]" Value="[NoFocusAlpha]" ExclusiveApply="false"/>
          <Set Target="[Root.Alpha]" Value="[FocusAlpha]"/>
          <Set Target="[Label.Color]" Value="[FocusColor]"/>
          <Set Target="[LabelPanel.MaximumSize]" Value="[FocusLabelSize]"/>
          <Set Target="[LabelPanel.Margins]" Value="[FocusLabelMargins]"/>
          <Set Target="[LabelPanel.Scale]" Value="[FocusScale]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[IsFocused]" Value="true"/>
          <Equality Source="[TransitionState.Value]" ConditionOp="NotEquals" Value="NavigatingToForward"/>
          <Equality Source="[FocusStyle]" Value="Text"/>
          <Equality Source="[FocusAnimationSpeed]" Value="fast"/>
          <Equality Source="[Environment.Is2DAnimationExperience]" Value="true"/>
        </Conditions>
        <Actions>
          <Invoke Target="[Root.DetachAnimation]" type="Alpha" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.DetachAnimation]" type="Move" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.DetachAnimation]" type="Size" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.DetachAnimation]" type="Scale" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[Root.AttachAnimation]" animation="animation://comm:ListViewItem.Alpha.GainFocus.Fast.GDI" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[Root.AttachAnimation]" animation="animation://comm:ListViewItem.Alpha.GainFocus.Fast.GDI" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.AttachAnimation]" animation="animation://comm:ListViewItem.Move.GainFocus.Fast.GDI" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.AttachAnimation]" animation="animation://comm:ListViewItem.Size.GainFocus.Fast.GDI" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.AttachAnimation]" animation="animation://comm:ListViewItem.Text.Scale.GainFocus.Fast.GDI" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Set Target="[Root.Alpha]" Value="[NoFocusAlpha]" ExclusiveApply="false"/>
          <Set Target="[Root.Alpha]" Value="[FocusAlpha]"/>
          <Set Target="[Label.Color]" Value="[FocusColor]"/>
          <Set Target="[LabelPanel.MaximumSize]" Value="[FocusLabelSize]"/>
          <Set Target="[LabelPanel.Margins]" Value="[FocusLabelMargins]"/>
          <Set Target="[LabelPanel.Scale]" Value="[FocusScale]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[IsFocused]" Value="true"/>
          <Equality Source="[TransitionState.Value]" ConditionOp="NotEquals" Value="NavigatingToForward"/>
          <Equality Source="[FocusStyle]" Value="Text"/>
          <Equality Source="[FocusAnimationSpeed]" Value="mouse"/>
        </Conditions>
        <Actions>
          <Invoke Target="[Root.DetachAnimation]" type="Alpha" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.DetachAnimation]" type="Move" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.DetachAnimation]" type="Size" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.DetachAnimation]" type="Scale" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[Root.AttachAnimation]" animation="animation://comm:ListViewItem.Alpha.GainFocus.Mouse" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[Root.AttachAnimation]" animation="animation://comm:ListViewItem.Alpha.GainFocus.Mouse" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.AttachAnimation]" animation="animation://comm:ListViewItem.Move.GainFocus.Mouse" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.AttachAnimation]" animation="animation://comm:ListViewItem.Size.GainFocus.Mouse" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.AttachAnimation]" animation="animation://comm:ListViewItem.Text.Scale.GainFocus.Mouse" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Set Target="[Root.Alpha]" Value="[NoFocusAlpha]" ExclusiveApply="false"/>
          <Set Target="[Root.Alpha]" Value="[FocusAlpha]"/>
          <Set Target="[Label.Color]" Value="[FocusColor]"/>
          <Set Target="[LabelPanel.MaximumSize]" Value="[FocusLabelSize]"/>
          <Set Target="[LabelPanel.Margins]" Value="[FocusLabelMargins]"/>
          <Set Target="[LabelPanel.Scale]" Value="[FocusScale]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[IsFocused]" ConditionOp="ChangedTo" Value="false"/>
          <Equality Source="[Environment.Is2DAnimationExperience]" Value="false"/>
        </Conditions>
        <Actions>
          <Invoke Target="[Root.DetachAnimation]" type="Alpha" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.DetachAnimation]" type="Move" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.DetachAnimation]" type="Size" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.DetachAnimation]" type="Scale" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.DetachAnimation]" type="Move" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.DetachAnimation]" type="Size" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.DetachAnimation]" type="Scale" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.DetachAnimation]" type="Move" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.DetachAnimation]" type="Size" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.DetachAnimation]" type="Scale" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[Root.AttachAnimation]" animation="animation://comm:ListViewItem.Alpha.LoseFocus" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[Root.AttachAnimation]" animation="animation://comm:ListViewItem.Alpha.LoseFocus" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.AttachAnimation]" animation="animation://comm:ListViewItem.Move.LoseFocus" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.AttachAnimation]" animation="animation://comm:ListViewItem.Size.LoseFocus" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.AttachAnimation]" animation="animation://comm:ListViewItem.Text.Scale.LoseFocus" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.AttachAnimation]" animation="animation://comm:ListViewItem.Move.LoseFocus" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.AttachAnimation]" animation="animation://comm:ListViewItem.Size.LoseFocus" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.AttachAnimation]" animation="animation://comm:ListViewItem.Text.Scale.LoseFocus" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.AttachAnimation]" animation="animation://comm:ListViewItem.Move.LoseFocus" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.AttachAnimation]" animation="animation://comm:ListViewItem.Size.LoseFocus" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.AttachAnimation]" animation="animation://comm:ListViewItem.Text.Scale.LoseFocus" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Set Target="[Root.Alpha]" Value="[FocusAlpha]" ExclusiveApply="false"/>
          <Set Target="[Root.Alpha]" Value="[NoFocusAlpha]"/>
          <Set Target="[Label.Color]" Value="[NoFocusColor]"/>
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[IsFocused]" ConditionOp="ChangedTo" Value="false"/>
          <Equality Source="[Environment.Is2DAnimationExperience]" Value="true"/>
        </Conditions>
        <Actions>
          <Invoke Target="[Root.DetachAnimation]" type="Alpha" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.DetachAnimation]" type="Move" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.DetachAnimation]" type="Size" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.DetachAnimation]" type="Scale" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.DetachAnimation]" type="Move" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.DetachAnimation]" type="Size" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.DetachAnimation]" type="Scale" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.DetachAnimation]" type="Move" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.DetachAnimation]" type="Size" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.DetachAnimation]" type="Scale" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[Root.AttachAnimation]" animation="animation://comm:ListViewItem.Alpha.LoseFocus.GDI" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[Root.AttachAnimation]" animation="animation://comm:ListViewItem.Alpha.LoseFocus.GDI" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.AttachAnimation]" animation="animation://comm:ListViewItem.Move.LoseFocus.GDI" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.AttachAnimation]" animation="animation://comm:ListViewItem.Size.LoseFocus.GDI" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[MousePanel.AttachAnimation]" animation="animation://comm:ListViewItem.Text.Scale.LoseFocus.GDI" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.AttachAnimation]" animation="animation://comm:ListViewItem.Move.LoseFocus.GDI" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.AttachAnimation]" animation="animation://comm:ListViewItem.Size.LoseFocus.GDI" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[LabelPanel.AttachAnimation]" animation="animation://comm:ListViewItem.Text.Scale.LoseFocus.GDI" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.AttachAnimation]" animation="animation://comm:ListViewItem.Move.LoseFocus.GDI" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.AttachAnimation]" animation="animation://comm:ListViewItem.Size.LoseFocus.GDI" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Invoke Target="[RightContentHost.AttachAnimation]" animation="animation://comm:ListViewItem.Text.Scale.LoseFocus.GDI" InvokePolicy="Synchronous" ExclusiveApply="false"/>
          <Set Target="[Root.Alpha]" Value="[FocusAlpha]" ExclusiveApply="false"/>
          <Set Target="[Root.Alpha]" Value="[NoFocusAlpha]"/>
          <Set Target="[Label.Color]" Value="[NoFocusColor]"/>
        </Actions>
      </Rule>
      <Changed Source="[Model.Description]" InitialEvaluate="true">
        <Actions>
          <Set Target="[Label.Content]" Value="[Model.Description]"/>
          <Invoke Target="[ContextualUIDescription.SetPropertyValue]" name="Text" value="[Model.Description]"/>
        </Actions>
      </Changed>
      <Default Target="[FullBackgroundFocus]" Value="[LabelBackgroundImageSet.Values.#Focus!Image]"/>
      <Default Target="[FullBackground]" Value="[LabelBackgroundImageSet.Values.#Default!Image]"/>
      <Default Target="[LabelBackgroundFocus]" Value="[LabelBackgroundImageSet.Values.#Focus!Image]"/>
      <Default Target="[LabelBackground]" Value="[LabelBackgroundImageSet.Values.#Default!Image]"/>
      <Condition Source="[FocusStyle]" SourceValue="Text">
        <Actions>
          <Set Target="[LabelPanel.MaximumSize]" Value="[LabelSize]"/>
          <Set Target="[LabelPanel.Margins]" Value="[LabelMargins]"/>
          <Set Target="[LabelPanel.Scale]" Value="[NoFocusScale]"/>
        </Actions>
      </Condition>
      <Condition Source="[FocusStyle]" SourceValue="Thumbnail">
        <Actions>
          <Set Target="[MousePanel.MaximumSize]" Value="[LabelSize]"/>
          <Set Target="[MousePanel.Margins]" Value="[LabelMargins]"/>
          <Set Target="[MousePanel.Scale]" Value="[NoFocusScale]"/>
        </Actions>
      </Condition>
    </Rules>
    <Content>
      <Panel Name="Root" MaximumSize="[TileSize]" Padding="[TilePadding]" Margins="[TileMargins]" CenterPointPercent="0.5, 0.5, 0.0">
        <Layout>
          <AnchorLayout SizeToHorizontalChildren="false" SizeToVerticalChildren="false"/>
        </Layout>
        <Children>
          <Panel>
            <Layout>
              <FlowLayout Orientation="Horizontal" ItemAlignment="Center"/>
            </Layout>
            <LayoutInput>
              <AnchorLayoutInput Vertical="Fill" Horizontal="Fill"/>
            </LayoutInput>
            <Children>
              <me:BaseListItemOverlayContent Name="LeftContentHost" Model="[Model]" Visible="false" Source="null" MouseInteractive="true"/>
              <Panel Name="MousePanel" MouseInteractive="true" CenterPointPercent="0.5, 0.5, 0.0">
                <Layout>
                  <LegacyHorizontalFlowLayout ReverseTraversal="true" InvertCoordinates="true" ItemAlignment="Center"/>
                </Layout>
                <Children>
                  <Panel Name="LabelPanel" Layout="Anchor">
                    <Children>
                      <Text Name="Label" Color="[NoFocusColor]" Font="[LabelFont]">
                        <LayoutInput>
                          <AnchorLayoutInput Vertical="Center" Horizontal="Near"/>
                        </LayoutInput>
                      </Text>
                      <Graphic Name="LabelBackgroundGraphic" Image="[LabelBackground]" LayoutInput="[LabelBackgroundLayoutInput]"/>
                    </Children>
                  </Panel>
                  <me:BaseListItemOverlayContent Name="RightContentHost" Model="[Model]" Visible="false" Source="null"/>
                </Children>
              </Panel>
            </Children>
          </Panel>
          <Graphic Name="FullBackgroundGraphic" Image="[FullBackground]" MinimumSize="[TileSize]">
            <LayoutInput>
              <AnchorLayoutInput Vertical="Fill" Horizontal="Fill"/>
            </LayoutInput>
          </Graphic>
        </Children>
      </Panel>
    </Content>
  </UI>
  <UI Name="BaseListItemOverlayContent">
    <Properties>
      <ICommand Name="Model" ICommand="$Required"/>
      <cor:Boolean Name="ParentKeyFocus" Boolean="false"/>
      <cor:String Name="FocusAnimationSpeed" String="slow"/>
    </Properties>
  </UI>
</Mcml>