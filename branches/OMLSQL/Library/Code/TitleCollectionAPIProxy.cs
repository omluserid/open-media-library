//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="net.tcp://localhost:8321/OMLTC", ConfigurationName="ITitleCollectionAPI")]
public interface ITitleCollectionAPI
{
    
    [System.ServiceModel.OperationContractAttribute(Action="net.tcp://localhost:8321/OMLTC/ITitleCollectionAPI/Add", ReplyAction="net.tcp://localhost:8321/OMLTC/ITitleCollectionAPI/AddResponse")]
    void Add(byte[] t);
    
    [System.ServiceModel.OperationContractAttribute(Action="net.tcp://localhost:8321/OMLTC/ITitleCollectionAPI/Replace", ReplyAction="net.tcp://localhost:8321/OMLTC/ITitleCollectionAPI/ReplaceResponse")]
    void Replace(byte[] t);
    
    [System.ServiceModel.OperationContractAttribute(Action="net.tcp://localhost:8321/OMLTC/ITitleCollectionAPI/Remove", ReplyAction="net.tcp://localhost:8321/OMLTC/ITitleCollectionAPI/RemoveResponse")]
    void Remove(int ID);
    
    [System.ServiceModel.OperationContractAttribute(Action="net.tcp://localhost:8321/OMLTC/ITitleCollectionAPI/ContainsDisks", ReplyAction="net.tcp://localhost:8321/OMLTC/ITitleCollectionAPI/ContainsDisksResponse")]
    bool ContainsDisks(OMLEngine.Disk[] disks);
    
    [System.ServiceModel.OperationContractAttribute(Action="net.tcp://localhost:8321/OMLTC/ITitleCollectionAPI/FindByID", ReplyAction="net.tcp://localhost:8321/OMLTC/ITitleCollectionAPI/FindByIDResponse")]
    byte[] FindByID(int ID);
    
    [System.ServiceModel.OperationContractAttribute(Action="net.tcp://localhost:8321/OMLTC/ITitleCollectionAPI/FindByDisks", ReplyAction="net.tcp://localhost:8321/OMLTC/ITitleCollectionAPI/FindByDisksResponse")]
    byte[] FindByDisks(OMLEngine.Disk[] disks);
    
    [System.ServiceModel.OperationContractAttribute(Action="net.tcp://localhost:8321/OMLTC/ITitleCollectionAPI/List", ReplyAction="net.tcp://localhost:8321/OMLTC/ITitleCollectionAPI/ListResponse")]
    System.Collections.Generic.Dictionary<int, string> List();
    
    [System.ServiceModel.OperationContractAttribute(Action="net.tcp://localhost:8321/OMLTC/ITitleCollectionAPI/Clean", ReplyAction="net.tcp://localhost:8321/OMLTC/ITitleCollectionAPI/CleanResponse")]
    void Clean();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface ITitleCollectionAPIChannel : ITitleCollectionAPI, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class TitleCollectionAPIClient : System.ServiceModel.ClientBase<ITitleCollectionAPI>, ITitleCollectionAPI
{
    
    public TitleCollectionAPIClient()
    {
    }
    
    public TitleCollectionAPIClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public TitleCollectionAPIClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public TitleCollectionAPIClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public TitleCollectionAPIClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void Add(byte[] t)
    {
        base.Channel.Add(t);
    }
    
    public void Replace(byte[] t)
    {
        base.Channel.Replace(t);
    }
    
    public void Remove(int ID)
    {
        base.Channel.Remove(ID);
    }
    
    public bool ContainsDisks(OMLEngine.Disk[] disks)
    {
        return base.Channel.ContainsDisks(disks);
    }
    
    public byte[] FindByID(int ID)
    {
        return base.Channel.FindByID(ID);
    }
    
    public byte[] FindByDisks(OMLEngine.Disk[] disks)
    {
        return base.Channel.FindByDisks(disks);
    }
    
    public System.Collections.Generic.Dictionary<int, string> List()
    {
        return base.Channel.List();
    }
    
    public void Clean()
    {
        base.Channel.Clean();
    }
}
